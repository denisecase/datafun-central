var relearn_search_index = [
  {
    "content": "The following Git skills and techniques may be considered basic level.\nBasic Git Creating and cloning repositories: Know how to create new repositories on Git and how to clone existing repositories to your local machine so that you can work on them.\nAdding and committing changes: Know how to add changes to your local repository and commit them so that they are saved to your repository’s history.\nPushing and pulling changes: Know how to push your local changes to your Git repository so that others can see them, and how to pull changes from the remote repository to your local machine to get the latest changes.\n",
    "description": "",
    "tags": null,
    "title": "Basics",
    "uri": "/techniques/git/basics/index.html"
  },
  {
    "content": "The following GitHub skills and techniques may be considered basic level.\nBasic GitHub [ ] Creating and cloning repositories: Know how to create new repositories on GitHub and how to clone existing repositories to your local machine so that you can work on them.\n[ ] Adding and committing changes: Know how to add changes to your local repository and commit them so that they are saved to your repository’s history.\n[ ] Pushing and pulling changes: Know how to push your local changes to your GitHub repository so that others can see them, and how to pull changes from the remote repository to your local machine to get the latest changes.\n",
    "description": "",
    "tags": null,
    "title": "Basics",
    "uri": "/techniques/github/basics/index.html"
  },
  {
    "content": "The following Python skills and techniques may be considered basic level in the context of data analysis.\nData Structures Lists: Know how to create and manipulate lists, and use them to store and organize data. Dictionaries: Know how to create and manipulate dictionaries, and use them to store and organize data in key-value pairs. Control Structures Conditional Statements: Know how to use if-else statements to conditionally execute code. Loops: Know how to use for and while loops to iterate over data. Functions Defining Functions: Know how to define functions to organize and reuse code. Lambda Functions: Know how to define and use lambda functions for short and simple functions. File I/O Reading and Writing Files: Know how to read and write data from files using Python. Libraries NumPy: Know how to use NumPy to perform numerical operations and calculations. Pandas: Know how to use Pandas to work with structured data and perform data analysis tasks. Matplotlib: Know how to use Matplotlib to create basic plots and visualizations. These skills and the associated techniques provide a strong foundation for data analysis in Python, and can be built upon with more advanced topics and libraries as needed.\n",
    "description": "",
    "tags": null,
    "title": "Basics",
    "uri": "/techniques/python/basics/index.html"
  },
  {
    "content": "This page provides an introduction for popular languages - some are programming languages - and some are markup languages.\nCSS CSS (Cascading Style Sheets) is a stylesheet language used for describing the look and formatting of a document written in HTML. While not directly related to data analytics, it’s essential for creating visually appealing dashboards and reports.\nGo (Golang) Go is a statically typed, compiled language with strong support for concurrent programming. While not as popular for data analytics as Python or R, Go is gaining traction for developing high-performance data processing tools.\nHTML HTML (Hypertext Markup Language) is the standard markup language used to create web pages. It is useful for structuring and formatting web content, including data visualizations and interactive analytics applications.\nJavaScript JavaScript is a widely-used programming language that enables interactivity and dynamic content on the web. In data analytics, JavaScript is commonly used alongside libraries like D3.js to create interactive visualizations and web-based applications.\nJulia Julia is a high-level, high-performance programming language for technical computing. It is gaining popularity in data analytics due to its speed, ease of use, and extensive library ecosystem, including packages for data manipulation, statistical analysis, and machine learning. It can be used in Jupyter notebooks along with Python.\nMarkdown Markdown is a lightweight markup language used to create formatted text documents. While not specific to data analytics, it is commonly used to document code, write README files, and create reports in a simple and human-readable format. It is commonly used in Jupyter notebooks along with Python.\nPowerShell PowerShell is a powerful scripting language and shell designed for automating tasks and managing configurations in Windows environments. While not commonly used for data analytics, it can be employed for data extraction, transformation, and automation tasks.\nPython Python is a popular programming language for data science and machine learning. It offers extensive libraries and tools for data analysis, visualization, and machine learning, making it an excellent choice for data analytics tasks.\nR R is a programming language and software environment for statistical computing and graphics. It is widely used in data analytics for statistical analysis, data manipulation, and visualization. R can be used in Jupyter notebooks along with Python.\nRust Rust is a systems programming language focused on safety, concurrency, and performance. While not as widely used for data analytics, it can be employed for building high-performance data processing tools and libraries.\n",
    "description": "",
    "tags": null,
    "title": "Languages",
    "uri": "/languages/index.html"
  },
  {
    "content": "The following GitHub skills and techniques may be considered intermediate level.\nIntermediate Git Resolving merge conflicts: Learn how to handle conflicts that arise when merging branches or changes from multiple contributors.\nCreating and managing branches: Know how to create and switch between branches, and how to merge changes between branches.\nUsing Git tags: Learn how to use Git tags to mark important points in your repository’s history, such as release versions or major milestones.\nReverting and resetting changes: Know how to revert changes to a previous commit, or reset your repository to a specific point in its history.\nUnderstanding Git workflows: Gain a deeper understanding of Git workflows, such as Gitflow or GitHub flow, to better manage changes and collaboration in your projects.\nWorking with remote repositories: Know how to add and remove remote repositories, and how to push and pull changes between them and your local repository.\n",
    "description": "",
    "tags": null,
    "title": "Intermediate",
    "uri": "/techniques/git/intermediate/index.html"
  },
  {
    "content": "The following GitHub skills and techniques may be considered intermediate level.\nIntermediate GitHub [ ] Working with branches: Know how to create and switch between branches, and how to merge changes between branches.\n[ ] Using issues and pull requests: Know how to create and manage issues and pull requests, which are useful for tracking tasks, discussing changes, and requesting code reviews.\n[ ] Collaboration: Know how to work collaboratively with others on a project using Git, including resolving merge conflicts and managing team workflows.\n[ ] Rebasing: Know how to use the git rebase command to reapply changes from one branch onto another and resolve conflicts.\n",
    "description": "",
    "tags": null,
    "title": "Intermediate",
    "uri": "/techniques/github/intermediate/index.html"
  },
  {
    "content": "This page provides an overview of intermediate skills for working with Python in the context of data analysis.\nLibraries NumPy: Know how to work with arrays, manipulate data, and perform mathematical operations.\nPandas: Know how to work with data frames and manipulate data for exploratory data analysis.\nMatplotlib: Know how to create visualizations for data analysis.\nData Cleaning Merging and joining data frames: Know how to combine data from multiple sources.\nHandling missing data: Know how to identify missing data and impute it using various methods.\nData normalization and scaling: Know how to standardize data and scale it to compare across different variables.\nData Analysis Descriptive statistics: Know how to calculate basic summary statistics like mean, median, and standard deviation.\nInferential statistics: Know how to perform hypothesis testing and confidence intervals.\nRegression analysis: Know how to perform linear regression and interpret regression coefficients.\nWorkflow and Collaboration Version control with Git: Know how to use Git for version control and collaborate with others on code.\nUnit testing and debugging: Know how to write and run unit tests and debug code.\nCode organization and project structure: Know how to structure a Python project for scalability and reproducibility.\n",
    "description": "",
    "tags": null,
    "title": "Intermediate",
    "uri": "/techniques/python/intermediate/index.html"
  },
  {
    "content": "This section includes documentation for some of the tools we use.\nGit Git is a popular version control system that allows developers to track changes to their code and collaborate with others on a project. It provides a way to manage and organize code, and allows for easy branching and merging. Git is widely used in software development, and is an essential tool for any developer’s toolkit.\nGitHub GitHub is a web-based platform that provides a range of features for managing Git repositories. It allows developers to host their code online, collaborate with others on a project, and track issues and bugs. GitHub is widely used in the open-source community and is a popular tool for managing software development projects.\nHomebrew Homebrew is a package manager for macOS that makes it easy to install, update, and manage software packages on a Mac. It simplifies the process of installing command line tools and other applications that may not be available through the official Mac App Store. Homebrew is a popular tool among developers and system administrators who frequently work with command line tools.\npip pip is a package manager for Python that makes it easy to install, update, and manage Python packages and dependencies. It is widely used in the Python community and is an essential tool for working with Python projects.\nPowerShell PowerShell is a command line shell and scripting language developed by Microsoft. It is designed to automate system administration tasks and provide an extensible platform for developers to write their own scripts and tools. PowerShell is widely used on Windows systems, and is becoming increasingly popular as a cross-platform tool for managing and automating IT infrastructure.\nVS Code Visual Studio Code, often referred to as VS Code, is a lightweight but powerful source code editor that is popular among developers. It is highly customizable and supports a wide range of programming languages, making it a versatile tool for developers of all skill levels. VS Code also has a large ecosystem of extensions that can be used to extend its functionality.\n",
    "description": "",
    "tags": null,
    "title": "Tools",
    "uri": "/tools/index.html"
  },
  {
    "content": "The following Git skills and techniques may be considered advanced level.\nAdvanced Git Rebasing: Know how to rebase a branch to update it with changes from another branch, while maintaining a clean history.\nCherry-picking: Know how to apply specific changes from one branch to another, without merging the entire branch.\nSquashing commits: Know how to combine multiple commits into a single commit, to create a more coherent commit history.\nStashing: Know how to temporarily save changes that are not yet ready to be committed, so that you can work on other tasks without losing your progress.\nGit hooks: Know how to create custom scripts that are automatically run by Git at specific times, such as before a commit or push.\nGit submodules: Know how to use Git submodules to include one repository as a subdirectory of another repository, to better manage complex projects.\nGit bisect: Know how to use Git bisect to find the commit that introduced a bug, by systematically testing different commits until the bug is found.\n",
    "description": "",
    "tags": null,
    "title": "Advanced",
    "uri": "/techniques/git/advanced/index.html"
  },
  {
    "content": "The following GitHub skills and techniques may be considered advanced level.\nAdvanced GitHub [ ] Git hooks: Know how to write and use Git hooks to automate tasks and enforce standards.\n[ ] Git workflows: Know how to use Git workflows like GitFlow or GitHub Flow to manage complex projects and team collaboration.\n[ ] Advanced Git commands: Be familiar with advanced Git commands like git cherry-pick, git bisect, and git stash.\n[ ] Git submodules: Know how to use Git submodules to include and manage external dependencies in your projects.\n[ ] Git LFS: Know how to use Git LFS (Large File Storage) to manage large binary files in your repositories.\n[ ] CI/CD: Know how to integrate Git with Continuous Integration/Continuous Deployment (CI/CD) tools to automate testing, building, and deployment of your projects.\n",
    "description": "",
    "tags": null,
    "title": "Advanced",
    "uri": "/techniques/github/advanced/index.html"
  },
  {
    "content": "A terminal, or command line interface, is a text-based way to interact with your computer. Terminals can be faster and more powerful than graphical user interfaces (GUIs) for many tasks, especially tasks that involve file management, development, or automation.\nThis page provides an introduction to some widely-used terminals.\nMac and Linux Mac and Linux systems offer the Terminal app, which provides a command-line interface for navigating the file system, running commands, and executing scripts. The Terminal supports a wide range of commands and utilities, and can be customized with various themes and configurations to suit individual preferences.\nPowerShell PowerShell is a powerful terminal and scripting language offered by Microsoft for all platforms, including Windows, macOS, and Linux. PowerShell provides a more powerful and flexible command-line environment than the Command Prompt, with support for features like object-oriented pipelines, remote management, and scripting with .NET objects.\nVS Code Terminal The terminal in Visual Studio Code offers a built-in command-line interface for developers. It provides access to a range of commands and utilities, including those specific to development tasks like running build scripts, testing code, and debugging applications.\nWindows Terminals Windows offers a variety of terminals depending on the user’s needs and preferences. These terminals include:\nCommand Prompt: A basic terminal emulator that has been included in Windows since the early days. Git Bash: A terminal emulator that is bundled with Git for Windows. It provides a Unix-like command-line environment for Windows, including support for common Unix utilities and shell scripting. PowerShell: A command-line shell and scripting language that is designed for system administration and automation in Windows. Windows Subsystem for Linux (WSL): A feature of Windows 10 that allows users to run a Linux environment directly on Windows, without the need for a virtual machine or container. Each of these terminals provides a unique set of features and capabilities, allowing users to choose the terminal that best fits their needs and workflow.\n",
    "description": "",
    "tags": null,
    "title": "Terminals",
    "uri": "/terminals/index.html"
  },
  {
    "content": "This page provides documentation and tutorials on various techniques used in data analytics and development.\nData Cleaning Introduction to Data Cleaning Data Visualization Introduction to Data Visualization Matplotlib Seaborn Machine Learning Introduction to Machine Learning Scikit-Learn TensorFlow Keras ",
    "description": "",
    "tags": null,
    "title": "Techniques",
    "uri": "/techniques/index.html"
  },
  {
    "content": "This page provides an introduction to popular hosting providers.\nBitBucket BitBucket is a popular hosting provider for Git repositories.\nDockerHub DockerHub is a cloud-based repository for Docker images and containers.\nGitHub GitHub is a widely used platform for hosting Git repositories, collaborating on code, and managing projects.\nGitHub Pages GitHub Pages is a free service for hosting static websites directly from a GitHub repository.\n",
    "description": "",
    "tags": null,
    "title": "Hosting",
    "uri": "/hosting/index.html"
  },
  {
    "content": "Few more things to share.\nAbout Learn more about this site and the tools we used.\n",
    "description": "",
    "tags": null,
    "title": "Other",
    "uri": "/other/index.html"
  },
  {
    "content": "Python is a popular high-level programming language that is easy to learn and widely used in data analysis, machine learning, web development, and many other fields.\nDefining Variables In Python, we can define a variable and assign a value to it using the “=” operator. For example:\nx = 10 Here, we’ve defined a variable x and assigned it the value of 10.\nPerforming Operations We can also perform mathematical operations on variables:\ny = 5 z = x + y Here, we’ve defined a variable y and added it to x to create a new variable z.\nExpressions Expressions are combinations of operators and operands that can be evaluated to produce a value.\nPython allows us to use expressions to perform operations on variables. For example:\na = 2 b = 3 c = a * b + 1 Here, we’ve defined three variables: a, b, and c. We’ve used the * operator to multiply a and b, and then added 1 to the result.\nExpressions can also include functions:\nimport math d = math.sqrt(a**2 + b**2) Here, we’ve imported the math module and used the sqrt() function to calculate the square root of a^2 + b^2.\nproduct = x * y quotient = x / y # Print statements print(\"x =\", x) print(\"y =\", y) print(\"x + y =\", sum) print(\"x - y =\", difference) print(\"x * y =\", product) print(\"x / y =\", quotient) x = 10 y = 5 z = x + y print(z) This code will create two variables, x and y, assign them the values 10 and 5, respectively, and then add them together to create a new variable z with the value 15. Finally, the code prints the value of z.\nStatements In Python, a statement is a line of code that performs an action or task.\nStatements are the smallest unit of code that can be executed and they represent an action or command. Each statement performs a specific task, such as defining a variable, calling a function, or creating a loop.\nx = 10 print(\"Hello, world!\") def add_numbers(a, b): return a + b In the above example, the first line (x = 10) is a statement that assigns the value 10 to the variable x. The second line (print(“Hello, world!”)) is a statement that prints the message “Hello, world!” to the console. The third line defines a function add_numbers that takes two arguments and returns their sum.\nStatements vs Expressions Some expressions can be statements, such as an assignment expression, which assigns a value to a variable.\nHowever, not all statements are expressions. For example, a print statement does not evaluate to a value and cannot be used as part of an expression.\nScript A Python script is simply a collection of statements executed in order to achieve a desired outcome.\n",
    "description": "",
    "tags": null,
    "title": "Basics",
    "uri": "/languages/python/basics/index.html"
  },
  {
    "content": "Bitbucket is a web-based version control repository hosting service owned by Atlassian. It is designed for team collaboration and primarily used for source code and development projects that use either Mercurial or Git revision control systems. Bitbucket provides a platform for teams to plan projects, collaborate on code, test, and deploy applications efficiently.\nAtlassian is the company behind Jira, a popular project management and issue tracking software. Jira is designed to help teams plan, track, and manage their work, including software development, agile project management, bug tracking, and task management. It offers a flexible and customizable platform that allows teams to organize their work, prioritize tasks, and monitor progress efficiently.\n",
    "description": "",
    "tags": null,
    "title": "Bitbucket",
    "uri": "/hosting/bitbucket/index.html"
  },
  {
    "content": "PowerShell Core is the cross-platform version of PowerShell. It was developed by Microsoft as an open-source project and is designed to run on Windows, Linux, and macOS, making it a truly cross-platform tool. PowerShell Core has a similar syntax and features to the traditional Windows PowerShell, but with additional cross-platform capabilities and support for running on a variety of operating systems.\nPowerShell Core also includes many improvements and new features compared to the older Windows PowerShell, including improved performance, support for Docker containers, and enhanced security features. PowerShell Core also has its own module repository, called the PowerShell Gallery, where users can download and install community-built PowerShell modules.\nHere are some common use cases:\nAnalytics Data collection and analysis: PowerShell can be used to collect and process data from various sources, including databases, logs, and web services. It can also be used to perform data analysis tasks such as data cleansing, transformation, and aggregation.\nReporting: PowerShell can be used to generate reports and visualizations based on data collected and analyzed from various sources. This can include dashboards, charts, and other types of visualizations.\nMachine learning: PowerShell can be used to develop and train machine learning models using libraries such as Microsoft’s Cognitive Services and TensorFlow.\nDigital forensics Data acquisition: PowerShell can be used to acquire data from disk images, memory dumps, and other sources for forensic analysis.\nEvidence examination: PowerShell can be used to search for specific file types, keywords, and other indicators of compromise within acquired data.\nData recovery: PowerShell can be used to recover data from damaged or corrupted drives, and to reconstruct deleted or lost files.\nNetwork analysis: PowerShell can be used to analyze network traffic and investigate potential security incidents or threats.\nSystem administration PowerShell provides a powerful command-line interface for managing Windows operating systems, including managing users and groups, configuring network settings, installing software, and performing other administrative tasks.\nAutomation PowerShell can be used to automate repetitive tasks, such as backups, file transfers, and system maintenance tasks. PowerShell scripts can be scheduled to run automatically or triggered by events such as system startup or user logon.\nDevelopment PowerShell includes a full-featured scripting language with access to the .NET Framework and other APIs, making it a powerful tool for developing and testing applications and scripts.\nCloud computing PowerShell can be used to manage cloud services and resources on platforms such as Microsoft Azure and Amazon Web Services (AWS). PowerShell modules and cmdlets are available for managing virtual machines, storage, networking, and other cloud services.\nSecurity PowerShell includes a range of security features, including execution policies, code signing, and encryption, making it a valuable tool for securing systems and managing user access to resources.\n",
    "description": "",
    "tags": null,
    "title": "Core",
    "uri": "/terminals/powershell/core/index.html"
  },
  {
    "content": "Python is a high-level programming language used for a wide range of applications, from data analysis to web development.\nMac/Linux Users Option 1: Official installation instructions. Follow instructions on the official Python website. This is the most up-to-date and comprehensive guide to installing Python on your system.\nOption 2: Step-by-step installation guide. Check out our installation instructions for a step-by-step guide.\nWindows Users Option 1: Official installation instructions. Follow instructions on the official Python website. This is the most up-to-date and comprehensive guide to installing Python on your system.\nOption 2: Step-by-step installation guide. Check out our detailed installation instructions for a step-by-step guide.\n",
    "description": "",
    "tags": null,
    "title": "Installation",
    "uri": "/languages/python/installation/index.html"
  },
  {
    "content": "Git is a widely-used version control system that helps data analysts and developers track changes to their code and collaborate with others.\nMac/Linux Users Option 1: Official installation instructions. Follow instructions on the official Git website. This is the most up-to-date and comprehensive guide to installing Git on your system.\nOption 2: Step-by-step installation guide. Check out our installation instructions for a step-by-step guide.\nWindows Users Option 1: Official installation instructions. Follow instructions on the official Git website. This is the most up-to-date and comprehensive guide to installing Git on your system.\nOption 2: Step-by-step installation guide. Check out our detailed installation instructions for a step-by-step guide.\nUse Git to manage your code and collaborate with others.\n",
    "description": "",
    "tags": null,
    "title": "Installation",
    "uri": "/tools/git/installation/index.html"
  },
  {
    "content": "PowerShell is a powerful command-line shell and scripting language designed for system administration and automation tasks. Here are some options for installing PowerShell on your system:\nWindows Users Option 1: Install via Microsoft Store. If you’re running Windows 10 or later, you can install PowerShell via the Microsoft Store. This is the recommended method, as it ensures that you have the latest version of PowerShell and allows for easy updates.\nOption 2: Download the MSI installer. If you’re not able to install via the Microsoft Store, you can download the MSI installer from the PowerShell GitHub repository. Choose the appropriate version for your system architecture (32-bit or 64-bit) and follow the installation wizard.\nmacOS Users Option 1: Install via Homebrew. If you’re using Homebrew on your Mac, you can install PowerShell by running the following command in your terminal: brew install --cask powershell.\nOption 2: Download the PKG installer. You can also download the PKG installer from the PowerShell GitHub repository. Choose the appropriate version for your macOS version and system architecture (Intel or Apple Silicon) and follow the installation wizard.\nLinux Users Option 1: Package manager installation. Most Linux distributions include PowerShell in their package repositories. You can search for PowerShell in your package manager and install it from there. For example, on Ubuntu or Debian, you can run sudo apt-get install powershell.\nOption 2: Download the package manually. You can also download the package for your distribution directly from the PowerShell GitHub repository and install it manually. Follow the instructions for your specific distribution on the download page.\nOnce you have PowerShell installed, you can use it to perform a wide range of tasks and automate common system administration tasks. Happy scripting!\n",
    "description": "",
    "tags": null,
    "title": "Installation",
    "uri": "/tools/vs-code/installation/index.html"
  },
  {
    "content": "On Mac and Linux machines, the Terminal app is widely used.\nTerminal is a command-line interface that allows users to interact with their computer using text commands. It provides a way to execute commands, manage files, and run scripts without the need for a graphical user interface.\nThe Terminal can be accessed by opening the Terminal application on a Mac or by opening a terminal emulator on a Linux distribution.\nOnce in the Terminal, users can navigate the file system, run commands, and install and manage software packages. The Terminal is a powerful tool for advanced users and developers, allowing for efficient and precise control over the computer. However, it does require some knowledge of command-line interfaces and syntax, which can be intimidating when getting started.\nHomebrew is useful commnad line tool for managing software packages in Terminal.\n",
    "description": "",
    "tags": null,
    "title": "Mac and Linux",
    "uri": "/terminals/mac-linux/index.html"
  },
  {
    "content": "PowerShell is a cross-platform terminal and scripting language used for a wide range of purposes including automation, administration, analytics, and digital forensics.\nPowerShell includes Intellisense to help complete commands. To accept, use the right arrow key (instead of tab).\nPowerShell Core This section provides an overview of the cross-platform PowerShell Core, including some use cases and capabilities.\nPowerShell vs Windows PowerShell When we say PowerShell, we generally mean PowerShell Core, the cross-platform version. There is also Windows PowerShell. They are different.\nInstallation This section helps with installing PowerShell on various operating systems, including Windows, Linux, and macOS.\nMultple Versions This section covers how to manage multiple versions of PowerShell on the same machine, and remove extra versions when no longer needed.\nPowerShell in VS Code This section covers the use of PowerShell in the popular code editor, Visual Studio Code (VS Code).\n",
    "description": "",
    "tags": null,
    "title": "PowerShell",
    "uri": "/terminals/powershell/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Standard",
    "uri": "/languages/python/libraries/standard/index.html"
  },
  {
    "content": "Markdown is a simple and lightweight markup language that can be used to format text. It is widely used for creating documentation, README files, and blogs. Markdown is easy to learn and can be used in any text editor. In this guide, we will cover the basics of Markdown syntax and how to use it effectively.\nBasic Syntax Markdown uses plain text formatting to create headers, lists, links, and other formatting elements. Here are some basic syntax elements of Markdown:\nHeaders Headers are used to create headings or subheadings in your document. To create a header, use the # symbol followed by a space and the text for your heading. Markdown supports up to six levels of headers.\n# This is a level one header ## This is a level two header ### This is a level three header #### This is a level four header ##### This is a level five header ###### This is a level six header Lists Lists are used to create ordered and unordered lists in your document. To create a list, use either the * symbol or the - symbol for an unordered list, or use numbers for an ordered list.\nUnordered List:\n- Item 1 - Item 2 - Item 3 Ordered List:\n1. Item 1 1. Item 2 1. Item 3 Links Links are used to create hyperlinks in your document. To create a link, use square brackets to enclose the link text, followed by the link URL in parentheses.\n[Markdown: Getting Started](https://www.markdownguide.org/getting-started/) Images Images are used to display images in your document. To add an image, use an exclamation point, followed by square brackets to enclose the alt text, and the image URL in parentheses.\n![Alt Text](image.url) Advanced Syntax Markdown also supports more advanced syntax, such as tables, code blocks, and inline code. Here are some examples of advanced Markdown syntax.\nTables Tables are used to display data in rows and columns. To create a table, use hyphens for the headers and pipes to separate the columns.\nCode Blocks Code blocks are used to display code in your document. To create a code block, use triple backticks followed by the language name, and then your code. End your code block with triple backticks.\n```python\rprint(\"Hello, world!\")\r```\rInline Code Inline code is used to display code within a paragraph. To create inline code, use single backticks to enclose your code.\nUse the print() function to print a message to the console.\nConclusion Markdown is a simple and powerful markup language that can be used for a variety of purposes. Whether you’re creating documentation, writing a README.md, working in Jupyter Notebooks, or just taking notes, Markdown can help you format your text and make it more readable.\n",
    "description": "",
    "tags": null,
    "title": "Syntax",
    "uri": "/languages/html/syntax/index.html"
  },
  {
    "content": "Markdown is a simple and lightweight markup language that can be used to format text. It is widely used for creating documentation, README files, and blogs. Markdown is easy to learn and can be used in any text editor. In this guide, we will cover the basics of Markdown syntax and how to use it effectively.\nBasic Syntax Markdown uses plain text formatting to create headers, lists, links, and other formatting elements. Here are some basic syntax elements of Markdown:\nHeaders Headers are used to create headings or subheadings in your document. To create a header, use the # symbol followed by a space and the text for your heading. Markdown supports up to six levels of headers.\n# This is a level one header ## This is a level two header ### This is a level three header #### This is a level four header ##### This is a level five header ###### This is a level six header Lists Lists are used to create ordered and unordered lists in your document. To create a list, use either the * symbol or the - symbol for an unordered list, or use numbers for an ordered list.\nUnordered List:\n- Item 1 - Item 2 - Item 3 Ordered List:\n1. Item 1 1. Item 2 1. Item 3 Links Links are used to create hyperlinks in your document. To create a link, use square brackets to enclose the link text, followed by the link URL in parentheses.\n[Markdown: Getting Started](https://www.markdownguide.org/getting-started/) Images Images are used to display images in your document. To add an image, use an exclamation point, followed by square brackets to enclose the alt text, and the image URL in parentheses.\n![Alt Text](image.url) Advanced Syntax Markdown also supports more advanced syntax, such as tables, code blocks, and inline code. Here are some examples of advanced Markdown syntax.\nTables Tables are used to display data in rows and columns. To create a table, use hyphens for the headers and pipes to separate the columns.\nCode Blocks Code blocks are used to display code in your document. To create a code block, use triple backticks followed by the language name, and then your code. End your code block with triple backticks.\n```python\rprint(\"Hello, world!\")\r```\rInline Code Inline code is used to display code within a paragraph. To create inline code, use single backticks to enclose your code.\nUse the print() function to print a message to the console.\nConclusion Markdown is a simple and powerful markup language that can be used for a variety of purposes. Whether you’re creating documentation, writing a README.md, working in Jupyter Notebooks, or just taking notes, Markdown can help you format your text and make it more readable.\n",
    "description": "",
    "tags": null,
    "title": "Syntax",
    "uri": "/languages/markdown/syntax/index.html"
  },
  {
    "content": "Windows PowerShell and PowerShell Core are two different versions of PowerShell that differ in their supported operating systems and features.\nWindows PowerShell (older, Windows-specific) Windows PowerShell is the original version of PowerShell that was released in 2006 and is included by default in Windows operating systems. It runs on the .NET Framework and is designed to work specifically on Windows operating systems. Windows PowerShell has a wide range of built-in cmdlets and supports scripting in PowerShell, as well as other scripting languages like VBScript and JScript. The typical installation path for Windows PowerShell is C:\\Windows\\System32\\WindowsPowerShell\\v1.0.\nPowerShell Core (newer, cross-platform) PowerShell Core, on the other hand, is an open-source version of PowerShell that was released in 2016 and is designed to be cross-platform. It runs on .NET Core and supports Windows, Linux, and macOS operating systems. PowerShell Core has a smaller footprint than Windows PowerShell and is designed to be more lightweight and modular. It includes many of the same built-in cmdlets as Windows PowerShell, but also has some additional features like support for SSH remoting and improved performance. The typical installation path for PowerShell Core is C:\\Program Files\\PowerShell\\7.\nUsing Both The two versions differ in their operating system support and feature set. Windows PowerShell is designed specifically for Windows operating systems and is included by default, while PowerShell Core is designed to be cross-platform and is a separate install.\n",
    "description": "",
    "tags": null,
    "title": "Core vs Windows",
    "uri": "/terminals/powershell/windows/index.html"
  },
  {
    "content": "Docker Hub is a cloud-based repository service provided by Docker, similar to GitHub, but specifically designed for sharing and managing Docker images. Just as GitHub is a platform for storing and collaborating on code repositories, Docker Hub allows you to store, share, and collaborate on Docker images. Docker Hub simplifies the process of distributing and deploying containerized applications and streamlines collaboration with other developers.\nHere’s a brief introduction to some key features.\nPublic and private repositories Docker Hub allows you to create both public and private repositories for your Docker images. Public repositories are accessible to everyone, while private repositories can only be accessed by authorized users.\nImage versioning Docker Hub supports versioning of Docker images using tags, which allows you to maintain multiple versions of an image in the same repository. This is similar to using branches in a Git repository to manage different versions of your code.\nAutomated builds You can link your Docker Hub repository to a GitHub or Bitbucket repository, enabling automated builds of Docker images whenever code is pushed to the linked repository. This feature ensures that your Docker images are always up-to-date with your source code.\nWebhooks Docker Hub supports webhooks, which can be used to trigger events or notifications when a new image is pushed to a repository. This can help automate deployment workflows and keep your applications up-to-date.\nOfficial images Docker Hub hosts a wide range of official images for popular programming languages, frameworks, and tools. These images are maintained by their respective organizations or developers and can be used as a base for building your own custom images.\nCommunity-contributed images In addition to official images, Docker Hub also hosts thousands of community-contributed images. These images are created and maintained by Docker users and can be a valuable resource when you’re looking for a pre-built solution or starting point for your own images.\nGet Started To get started with Docker Hub, sign up for a free account. Once you have an account, you can create your own repositories, browse and search for images, and collaborate with other users.\nIf you’re familiar with GitHub, you’ll find many similarities in the way Docker Hub organizes and manages repositories, making it easy to transition between the two platforms.\n",
    "description": "",
    "tags": null,
    "title": "Dockerhub",
    "uri": "/hosting/dockerhub/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "External",
    "uri": "/languages/python/libraries/external/index.html"
  },
  {
    "content": "PowerShell is a powerful cross-platform terminal and scripting language used for a wide range of purposes. Here are some options for installing PowerShell on your system:\nMac/Linux Users Official installation instructions. Follow the instructions on the official PowerShell GitHub repository to download and install PowerShell on your system. Windows Users Official installation instructions. Follow the instructions on the official PowerShell website to download and install PowerShell on your system. Verify Version Open PowerShell and run the following command to verify installation:\n$PSVersionTable.PSVersion\n",
    "description": "",
    "tags": null,
    "title": "Installation",
    "uri": "/terminals/powershell/installation/index.html"
  },
  {
    "content": "Advanced Python Skills These skills are considered advanced and will be useful for more advanced data analysis tasks.\nObject-Oriented Programming Understand the basics of object-oriented programming (OOP) and how to apply it in Python. Create and use classes to encapsulate related data and functionality. Use inheritance and polymorphism to extend existing classes and create new ones. Functional Programming Understand the principles of functional programming and how to use functional programming concepts in Python. Use lambda functions and higher-order functions to create more expressive and powerful code. Apply functional programming techniques to data processing and analysis tasks. Decorators Understand what decorators are and how to use them to modify the behavior of functions and methods. Use built-in Python decorators like @property, @staticmethod, and @classmethod. Create custom decorators to add functionality to your code. Generators and Iterators Understand the difference between generators and iterators and how to use them in Python. Use generators to lazily generate and process data without creating large in-memory data structures. Implement custom iterators to provide custom ways of iterating over data. Concurrency and Parallelism Understand the difference between concurrency and parallelism and how to achieve both in Python. Use threads and processes to perform multiple tasks simultaneously. Use asynchronous programming techniques to handle I/O-bound tasks efficiently. Performance Optimization Understand how to optimize Python code for performance. Use profiling tools to identify performance bottlenecks in your code. Apply performance optimization techniques like caching, memoization, and vectorization to speed up your code. ",
    "description": "",
    "tags": null,
    "title": "Advanced",
    "uri": "/techniques/python/advanced/index.html"
  },
  {
    "content": "There may be multiple versions of PowerShell on your computuers, especially on Windows. This can sometimes cause confusion.\nIt’s perfectly fine to have multiple installations, but you can remove some if they are unneeded.\nOn Windows machines, it’s common to have both:\nPowerShell Core (the newer, cross-platform version) Windows Powershell (the original Windows-specific verison) Read more about Windows PowerShell vs PowerShell Core.\nUninstall To uninstall older versions of PowerShell on Windows, follow these steps:\nOpen the Start menu and type “Add or remove programs” in the search box. Click on the “Add or remove programs” option that appears in the search results.\nIn the list of installed programs, locate the PowerShell versions to uninstall. Search for “PowerShell” or sort the list by name or date to find the relevant entries.\nClick on each PowerShell version that you want to uninstall, then click “Uninstall”. Follow the prompts to complete the process.\nOnce uninstalled, ensure the version you want to keep is still installed and functional.\nCheck the version of PowerShell by opening a PowerShell window and running the command $PSVersionTable.PSVersion. This will display the version number of the PowerShell installation that is currently in use.\n",
    "description": "",
    "tags": null,
    "title": "Multiple",
    "uri": "/terminals/powershell/multiple/index.html"
  },
  {
    "content": "Visual Studio Code (VS Code) is a popular code editor that supports many programming languages, including PowerShell.\nTerminals in VS Code Open VS Code and navigate to the “Terminal” panel by clicking on the terminal icon in the left-hand panel, or by using the keyboard shortcut Ctrl+Shift+ ``.\nIn the Terminal panel, click on the plus (+) icon to open a new terminal.\nDefault Shell By default, the new terminal will use the default shell associated with your system, e.g., Windows Command Prompt (cmd).\nOpen a PowerShell Terminal from Panel To open a PowerShell terminal in VS Code, click on the drop-down arrow in the terminal panel and select “PowerShell” from the list of available shells.\nSet Default Terminal There are several options for setting the default terminal to PowerShell in VS Code:\nUse the Command Palette (recommended) Use the Terminal Dropdown Use the VS Code Settings 1. Set Default using Command Palette (Recommended) This method helps with multiple PowerShell installations when you want to open a specific PowerShell option.\nIn VS Code, from the menu, select View / Command Palette / Terminal: Select Default Profile.\nLook carefully at the PowerShell options. For example, you may have:\nPowerShell Winddows PowerShell the typical installation path for PowerShell Core is something like C:\\Program Files\\PowerShell\\7.\nThe typical installation path for Windows PowerShell is something like C:\\Windows\\System32\\WindowsPowerShell\\v1.0.\nRead more about Windows PowerShell vs PowerShell Core.\n2. Set Default from Terminal Dropdown Alternatively, to make PowerShell your default terminal in VS Code, click on the drop-down arrow in the terminal panel and select “Select Default Profile”.\nIn the “Select Default Profile” dropdown, select “PowerShell” from the list. 3. Set Default using Settings Or to configure the Settings directly, follow these steps:\nOpen the VS Code settings editor by clicking on the gear icon in the lower-left corner of the window and selecting “Settings” from the menu.\nIn the search bar at the top of the settings editor, type “terminal.integrated.shell.windows”. This will filter the settings to show the terminal shell settings for Windows.\nClick on the edit icon (pencil icon) next to “Terminal \u003e Integrated \u003e Shell: Windows” to open the editing interface.\nEnter the path to the PowerShell executable that you want to use as the default shell in VS Code. For example, if you want to use PowerShell Core (the cross-platform version), you might enter “C:\\Program Files\\PowerShell\\7\\pwsh.exe” (assuming that PowerShell Core is installed in the default location).\nSave the changes to the “Settings” editor by clicking on the “Save” button or using the keyboard shortcut (Ctrl+S on Windows/Linux or Command+S on macOS).\nRun PowerShell as Administrator Sometimes you’ll need to run PowerShell as an Adminstrator (Admin), for example, when installing packages with Chocolatey.\nOutside VS Code, Start / Windows PowerShell / Run as Administrator.\nUse as needed and then return to VS Code for non-admin commands.\n",
    "description": "",
    "tags": null,
    "title": "VS Code",
    "uri": "/terminals/powershell/vscode/index.html"
  },
  {
    "content": "GitHub is a web-based platform that allows developers to store and manage their code and collaborate with others. It is built on top of Git, which is a distributed version control system that allows developers to track changes to their code over time and collaborate with others on the same codebase.\nWith GitHub, developers can create their own repositories, which are essentially folders that contain their code, documentation, and other files related to a specific project. They can also fork other people’s repositories to create their own copies, which they can then modify and contribute back to the original repository. This allows for easy collaboration and code sharing among developers.\nGitHub also provides a range of tools for developers to manage their code, such as the ability to track and resolve issues, review and merge pull requests, and create and manage branches. It also provides a web-based interface for viewing and editing code, as well as a built-in code editor. Additionally, it has a wide range of integrations and APIs that allow developers to automate various development tasks and integrate with other tools and services.\nIntegrated Editing - New! You can use the github.dev web-based editor to edit files and commit your changes from your browser.\nTo try it, when viewing a repository in your browser:\nChange the URL from “github.com” to “github.dev”. When viewing a file, use the dropdown menu next to and select github.dev. Read more at https://docs.github.com/en/codespaces/the-githubdev-web-based-editor.\nAlternatives BitBucket Read More Read more about:\nTechniques and skills GitHub Pages Git ",
    "description": "",
    "tags": null,
    "title": "Github",
    "uri": "/hosting/github/index.html"
  },
  {
    "content": "GitHub Pages is a free and easy way to host static websites directly from your GitHub repositories. It is ideal for hosting personal blogs, project documentation, or simple websites. With GitHub Pages, you can quickly create a site using Markdown, HTML, CSS, and JavaScript, and have it automatically generated and hosted by GitHub.\nSome key features of GitHub Pages include:\nEasy setup Setting up a GitHub Pages site is simple and requires only a few steps. You can create a new repository or use an existing one, add your content, and enable GitHub Pages in the repository settings.\nCustom domains By default, GitHub Pages sites are hosted under a github.io subdomain, but you can also configure a custom domain for your site.\nJekyll integration GitHub Pages integrates seamlessly with Jekyll, a popular static site generator. This allows you to write your content in Markdown, use templates and themes, and have Jekyll automatically generate your site’s HTML, CSS, and JavaScript.\nHugo support GitHub Pages also supports hosting websites generated with Hugo. Hugo is an open-source static site generator written in Go, known for its speed and flexibility. It enables you to create websites using Markdown, HTML, CSS, and JavaScript, and comes with a rich set of features, including templates, themes, shortcodes, and built-in support for taxonomies such as categories and tags. Hugo is designed to handle large sites efficiently, making it a popular choice for blogs, portfolios, and documentation sites.\nVersion control Since GitHub Pages sites are hosted directly from your GitHub repositories, you get all the benefits of version control. This makes it easy to track changes, collaborate with others, and revert to previous versions of your site if needed.\nSSL support GitHub Pages provides free SSL support for both github.io subdomains and custom domains, ensuring secure connections for your site visitors.\n",
    "description": "",
    "tags": null,
    "title": "Github Pages",
    "uri": "/hosting/github-pages/index.html"
  },
  {
    "content": "We hope you enjoy this centralized information for data fundamentals and getting started with professional development.\nThese powerful, user-friendly, industry-standard languages, tools, and techniques form core foundations of a productive environment.\nWe introduce use them for many purposes including\ndata analysis, data science, computer science, application development, digital forensics analysis, streaming data and data in motion, data lakes and data at rest, continoous intelligence, and more. This Site We use Hugo to generate this site. You can find the source code for Hugo at GitHub: gohugoio/hugo.\nSee the source code for the amazing Relearn theme at GitHub: McShelby/hugo-theme-relearn.\nHost your site for free with GitHub Pages. For more information, see the GitHub Pages documentation.\nThis site was developed in collaboration with ChatGPT and other resources. For more information, please visit the OpenAI website.\n",
    "description": "",
    "tags": null,
    "title": "About",
    "uri": "/other/about/index.html"
  },
  {
    "content": "Python is a popular programming language that has gained a lot of traction in the fields of artificial intelligence (AI) and machine learning (ML).\nPython offers a range of libraries and frameworks that make it easier to develop and deploy AI and ML applications, including:\nNumPy: A library for numerical computing in Python, NumPy provides support for large, multi-dimensional arrays and matrices, as well as a range of mathematical functions for working with this data.\nPandas: A library for data manipulation and analysis in Python, Pandas provides support for working with structured data in a variety of formats, including CSV, Excel, SQL databases, and more.\nScikit-learn: A library for machine learning in Python, Scikit-learn provides a range of algorithms for classification, regression, and clustering, as well as tools for model selection and evaluation.\nTensorFlow: A popular library for machine learning and deep learning in Python, TensorFlow provides support for building and training neural networks, as well as tools for deploying models on a variety of platforms.\nKeras: A high-level neural networks API in Python, Keras provides a simple and intuitive interface for building and training deep learning models, as well as support for a range of backends, including TensorFlow.\n",
    "description": "",
    "tags": null,
    "title": "AI and ML",
    "uri": "/languages/python/ai-and-ml/index.html"
  },
  {
    "content": "Git is a widely-used version control system that helps you track changes to your code and collaborate with others. With Git, you can create a complete history of your work, from the initial commit to the latest changes. This makes it easy to work on a project with others, keep track of your progress, and recover from mistakes.\nCreating a Repository To get started with Git, you need to create a repository. This is where you’ll store your code and track changes to it. There are several ways to create a repository:\nClone an existing repository: If you want to work on code that’s already been created and shared by someone else, you can clone their repository to your local machine. To do this, you’ll need the repository’s URL and you can use the git clone command to create a local copy of the code.\nFork an existing repository: If you want to make changes to someone else’s code and contribute those changes back to their repository, you can fork their repository. This creates a copy of their repository in your GitHub account, which you can then clone to your local machine and work on.\nCreate a new repository: If you want to start a new project from scratch, you can create a new repository by clicking the “+” sign in the top right corner of your GitHub account.\nGetting Code onto Your Machine Once you have a repository set up, you’ll want to get the code onto your local machine so you can work on it. To do this, clone the repository using the git clone sourceurl command. Change sourceurl to the address shown in the browser when viewing the root folder of the repository. This will create a local copy of the repository on your machine that you can work with.\nSaving Changes with Git Once you have a copy of the repository on your machine, you can make changes to the code and save those changes to the repository using Git. The basic workflow for this is:\nAdd changes: Use the git add . command to add the changes you’ve made to the code to the staging area. It’s said “git add dot” - see the dot at the end - that means add all the newly created files into source control.\nCommit changes: Use the git commit -m \"add feature n command to save the changes to the local repository with a descriptive commit message.\nPush changes: Use the git push origin main command to push the changes from your local repository back up to the remote repository on GitHub.\nThis sequence of commands is very common:\ngit add . git commit -m \"tell us what you did\" git push origin main Editing on your Machine We typically like to edit files on our machine using editors like VS Code or IDEs like PyCharm and Spyder. These local tools provide advanced features including syntax highlighting, code completion, and debugging, which can make our work more efficient.\nEditing in the Cloud However, the power of our local editors and IDEs is increasingly becoming available in the cloud, and we can make many updates to our repositories right from the GitHub web interface. For example, you can use the github.dev web-based editor to edit files and commit your changes.\nIt’s important to note that if we edit files both on our machine and in the cloud, we can end up with conflicts when trying to merge our changes. Therefore, it’s important to ensure that we always pull down the latest changes from the cloud before making any local edits, and that we push our changes back up to the cloud as soon as we’re finished with them.\nUsing the git pull command will bring any changes made directly in your GitHub (or other cloud) repository down to your machine.\ngit pull Read more about the github.dev editor at:\nhttps://docs.github.com/en/codespaces/the-githubdev-web-based-editor Remotes In Git, “origin” is a shorthand name that refers to the remote repository where your code is stored. When you clone a repository, Git automatically creates an “origin” remote that points to the original repository on the server. You can use this remote to pull changes from the server or push your local changes back to it.\nYou can add more than one remote to a repository.\nBranches Git branches are separate lines of development that allow multiple contributors to work on different features or versions of a project simultaneously.\nThe default branch in Git is now called “main”, but “master” was previously used, so you may still see it.\nPull and Push When we use git pull, Git already knows the source and destination of the changes (i.e., the remote and local repositories) because it’s been configured using the git clone command.\nWhen we use git push, we need to specify both the remote repository (the source) and the branch we want to push the changes to (the destination). The origin in git push origin main refers to the remote repository we want to push the changes to, and main refers to the branch on the remote repository that we want to update with our changes.\n",
    "description": "",
    "tags": null,
    "title": "Basics",
    "uri": "/tools/git/basics/index.html"
  },
  {
    "content": "In Git, we are always working on a branch of code, which is like a separate “timeline” for the code.\nDefault Branch The default branch is employed automatically when we first create a repository, and it is typically and by default named main. On older repos, you may see a master branch instead, but the old terminology is discouraged and easy to update.\nWorking Alone For independent projects, we may work directly on the main default branch.\nIndividual developers may choose to use branches to work on new features or fixes without affecting their main codebase.\nWorking Together In a professional environment, it’s generally recommended to create new branches for new features or changes to avoid conflicts with other developers and to make it easier to manage and review changes.\nIndividual developers can also use branches to experiment with new features or make changes without affecting the main codebase.\nWe can make changes, commit them to our branch, and then merge our branch back into the default branch when appropriate. Multiple branches allow a team to work on different features or changes at once without worrying about conflicts or breaking the main codebase.\nOnce we’re satisfied with our changes on a branch, we can create a pull request to request that the changes be reviewed and merged into the default branch. Team leads can then review and merge the changes as needed. The default branch is typically set to “main” and is the primary branch for the project.\nYou can create a new branch with the git branch command, and switch to that branch with the git checkout command. Once you’re on the new branch, any changes you make and commit will only affect that branch.\nTo merge a branch back into the main codebase, you can use the git merge command. This will bring any changes from the branch into the main codebase, and you can resolve any conflicts that arise during the merge.\nGit branches are an important tool for managing complex projects with multiple contributors, and they allow for efficient collaboration and code review.\n",
    "description": "",
    "tags": null,
    "title": "Branches",
    "uri": "/tools/git/branches/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "content": "Chocolatey is a package manager for Windows, similar to Homebrew for macOS. It simplifies the installation, updating, and management of Windows software, including command-line tools, applications, and libraries. Chocolatey uses NuGet infrastructure and PowerShell to manage packages, making it a powerful tool for Windows users.\nAlternatives Microsoft has been working on a package manager called Winget. Winget is an official package manager developed by Microsoft, and it is designed to be the native package manager for Windows. It is gaining new features and improvements over time.\nTo choose the best package manager for your needs, consider the following.\nCommunity adoption Both Chocolatey and Winget have growing communities. Chocolatey has been around for longer and has a larger repository of packages. As Winget gains traction, its community and package offerings will likely grow. Official support As an official Microsoft product, Winget may receive better long-term support and integration with the Windows ecosystem. This could make it a more future-proof choice. Features and functionality Chocolatey has more mature features and a comprehensive set of tools. However, Winget is expected to gain more features and improvements over time. ",
    "description": "",
    "tags": null,
    "title": "Chocolatey",
    "uri": "/tools/chocolatey/index.html"
  },
  {
    "content": "The Command Prompt is a basic terminal emulator that has been included in Windows since the early days. It provides a command-line interface for interacting with the file system, running basic commands, and executing batch scripts.\nThe Command Prompt supports a range of commands, including:\ndir: List the contents of a directory. cd: Change the current directory. md: Create a new directory. del: Delete files. copy: Copy files. move: Move files. In addition to these basic commands, the Command Prompt supports a range of advanced features, such as redirection of input and output, piping of commands, and batch scripting.\nIt’s a simple and lightweight tool well-suited for basic tasks and for users who prefer a minimalist interface.\nHowever, it lacks some of the advanced features and flexibility found in more modern terminal emulators like PowerShell and GitBash.\n",
    "description": "",
    "tags": null,
    "title": "Commnd Prompt",
    "uri": "/terminals/windows/command-prompt/index.html"
  },
  {
    "content": "Conda is a cross-platform package manager primarily focused on Python and R programming languages. It is designed to manage packages and dependencies for data science and machine learning projects. conda can create and manage environments, allowing you to maintain multiple versions of Python and installed packages.\nIt is often used in conjunction with the Anaconda distribution, which provides a comprehensive suite of data science tools and libraries, or its smaller version, Miniconda.\n",
    "description": "",
    "tags": null,
    "title": "conda",
    "uri": "/tools/conda/index.html"
  },
  {
    "content": "After installing, configure Git with your name and email.\nUse your GitHub email for best results.\nOpen Git Bash on Windows To open Git Bash on Windows:\nPress the Windows key on your keyboard to open the Start menu. Type “Git Bash” into the search bar and select it from the list of results. Git Bash should now open in a new window. Open Terminal on Mac or Linux On Mac or Linux, open Terminal app.\nCheck Git Configuration Type the following command to display your Git configuration:\ngit config --list Look for the following lines in the output:\nuser.name=Your Name user.email=your.email@example.com If you see your name and email listed, then they are set in Git.\nSet Git Configuration If you don’t see your name and email listed, set them using the following commands:\ngit config --global user.name \"Your Name\" git config --global user.email your.email@example.com Replace “Your Name” and “your.email@example.com” with your actual name and email address.\nThe --global flag ensures the settings are applied globally across all your Git repositories.\n",
    "description": "",
    "tags": null,
    "title": "Configuration",
    "uri": "/tools/git/configuration/index.html"
  },
  {
    "content": "We can edit project files in at least two places:\nlocally, on our machine in the cloud, e.g., by using the editing features in GitHub Bad Practices We want to keep our local version and cloud version in sync at all times.\nSome of the worst things we can do are:\nForget to pull before we start our work. Pull code and leave it for a long time, then start working on old, stale code. Make huge, expansive contributions that take a long time (unless we know how to branch - an intermediate Git skill.) Wait to push our completed changes to the cloud. Good Practices To minimize the chance of conflits:\nAlways pull code before you start working locally. Never work on stale code! Make small, incremental changes. As soon as you finish a useful contribution, git add, commit, and push up to the cloud. Keep your local and cloud repositories synchronized. Use these for each session.\nBefore you start:\ngit pull After you finish a set of edits:\ngit add . git commit -m \"add title\" git push When working collaboratively, communicate with team members and establish a clear workflow. Ensure the team knows who is working on which files and when changes are being made. You might create different small, focused branches that don’t overlap much in terms of the files they modify.\nMerge Conflicts Merge conflicts can occur when:\ntwo people edit the same file simultaneously changes are made to a file both locally and in the cloud at the same time. two branches with different changes are merged. For example, we might use the GitHub cloud editor to make a quick fix to our README.md - forgetting that we’re also in the process of updating installation instructions on the local README.md.\nMerge conflicts can be frustrating, but they are an inevitable part of collaborative work.\nIf you do run into a merge conflict, don’t worry - it’s not the end of the world. Git provides tools to help you resolve conflicts and merge changes together. The first step is to understand which files have conflicts by running git status. The files with conflicts will be marked as “unmerged”.\nTo resolve the conflict, open the conflicted file and look for the conflicting sections marked with «««\u003c HEAD, =======, and »»»\u003e. Manually edit the file to remove the conflicting sections and keep the changes you want. Once you’ve resolved the conflict, fstage the changes with git add and commit them with git commit.\nIf you’re still unsure how to resolve the conflict, ask for help from your team members or consult Git documentation. Stay calm and take your time to carefully resolve the conflict.\nExperience managing merge conflicts can be very valuable.\n",
    "description": "",
    "tags": null,
    "title": "Conflicts",
    "uri": "/tools/git/conflicts/index.html"
  },
  {
    "content": "Student-recommended video on Git - definitely worth sharing! It covers things in a similar way and you can jump right to the parts you need.\nNote: Watch when you have time - use it when you’re ready to learn more about Git. Many students find it very helpful. I don’t know how anyone could provide more information, more efficiently than this.\nhttps://www.youtube.com/watch?v=RGOj5yH7evk\nGit and GitHub for Beginners - Crash Course Over 2 million views.\nFrom the video description:\nLearn about Git and GitHub in this tutorial. These are important tools for all developers to understand. Git and GitHub make it easier to manage different software versions and make it easier for multiple people to work on the same software project. This course was developed by Gwen Faraday.\n⭐️ Contents ⭐️\r⌨️ (0:00) Introduction\r⌨️ (1:10) What is git?\r⌨️ (1:30) What is version control?\r⌨️ (2:10) Terms to be learn in video\r⌨️ (5:20) Git commands\r⌨️ (7:05) sign up in GitHub\r⌨️ (11:32) using git in local machine\r⌨️ (11:54) git install\r⌨️ (12:48) getting code editor\r⌨️ (13:30) inside VS Code\r⌨️ (14:30) cloning through VS Code\r⌨️ (17:30) git commit command\r⌨️ (18:15) git add command\r⌨️ (19:15) committing\r⌨️ (20:20) git push command\r⌨️ (20:30) SSH Keys\r⌨️ (25:25) git push\r⌨️ (30:21) Review workflow so far\r⌨️ (31:40) Compare between GitHub workflow and local git workflow\r⌨️ (32:42) git branching\r⌨️ (56:30) Undoing in git\r⌨️ (1:01:50) Forking in git\r⌨️ (1:07:55) Ending\r",
    "description": "",
    "tags": null,
    "title": "Crash Course",
    "uri": "/tools/git/crash-course/index.html"
  },
  {
    "content": "CSS is a powerful styling language used to add visual effects to web pages.\nWhy CSS? For web developers and designers, CSS is an essential skill for creating attractive and engaging websites.\nCSS helps to create visually appealing layouts and designs that enhance user experience. It allows for consistent styling across all pages of a website, making it easier to maintain and update. CSS Syntax CSS uses a set of rules and declarations to style HTML elements. Selectors are used to target specific HTML elements, while properties define the styling rules. Free Resources for Learning CSS CSS Tricks: A website with a wide range of articles, tutorials, and resources for learning CSS. MDN Web Docs - CSS: A comprehensive guide to CSS, with documentation and examples. W3Schools CSS Tutorial: A free, interactive tutorial for learning CSS, with practical examples and exercises. Codecademy CSS Course: An interactive course that covers the basics of CSS, with hands-on coding exercises. CSS Zen Garden: A showcase of creative CSS designs, with source code available for learning. CSS Frameworks and Libraries CSS frameworks and libraries provide pre-built CSS styles and components that can be easily incorporated into web pages. Popular CSS frameworks and libraries include Bootstrap, Foundation, and Bulma. File Extensions .css ",
    "description": "",
    "tags": null,
    "title": "CSS",
    "uri": "/languages/css/index.html"
  },
  {
    "content": "Docker is an open-source platform that automates the deployment, scaling, and management of applications by using containerization technology. It allows developers to package an application and its dependencies (libraries, configuration files, etc.) into a single, lightweight, and portable container. These containers can run consistently across different environments, simplifying application development, testing, and deployment.\nDocker provides the following features:\nContainerization Docker uses containerization to isolate applications and their dependencies into separate, self-contained units. This approach ensures that each application runs in a consistent environment, reducing conflicts and improving security.\nImage Management Docker images are templates used to create containers. They are lightweight and can be easily shared, stored, and versioned. Docker Hub, the official public registry, hosts thousands of pre-built images for various programming languages, frameworks, and tools.\nPortability Docker containers can run on any system that supports Docker, regardless of the underlying infrastructure or platform. This makes it easy to deploy and migrate applications across different environments, such as development, testing, and production.\nScalability Docker enables horizontal scaling of applications by allowing you to deploy multiple instances of the same container. This approach can help distribute the load across multiple resources and improve application performance.\nVersion Control Docker images can be versioned and stored in registries, making it easy to rollback, upgrade, or downgrade applications as needed. This also facilitates collaboration among team members, as they can share and use the same image versions.\nEcosystem Docker has a rich ecosystem of tools and services, such as Docker Compose, Docker Swarm, and Kubernetes, that can help streamline the development and deployment process. Many third-party tools and plugins also integrate with Docker to extend its functionality.\nInstallation The installation process for Docker depends on your operating system. Follow the instructions below based on your platform.\nDocker Installation ",
    "description": "",
    "tags": null,
    "title": "Docker",
    "uri": "/tools/docker/index.html"
  },
  {
    "content": "Python environments can be confusing at first, but they are essential for developing and deploying Python applications.\nOverview At a high level, you can think of Python environments as isolated “containers” that provide a controlled environment for your code to run in.\nThey are similar in some ways to operating systems, in that they provide a layer of abstraction between the code and the underlying system, and allow multiple applications to run independently without interfering with each other.\nPython Environments In the case of Python environments, the “container” is a self-contained installation of the Python interpreter and associated packages and dependencies.\nEnvironments allow you to install and manage different versions of Python and packages without affecting other environments or your system Python installation.\nBy creating separate environments for each project, you can ensure that each project has access to the correct versions of Python and packages, and that packages do not conflict with each other.\nThis can help ensure that your code works consistently across different machines and environments, and can make it easier to manage and deploy your code.\nImportance There are several reasons why Python environments are important:\nVersion management Different projects may require different versions of Python or packages. By creating separate environments for each project, you can ensure that each project has access to the correct versions of Python and packages.\nDependency management Python packages often have complex dependencies on other packages. By isolating each project in its own environment, you can avoid conflicts between different packages and ensure that each project has the correct dependencies installed.\nReproducibility By using environments, you can ensure that your code works consistently across different machines and environments. This is important when collaborating with others or when deploying your code to a production environment.\nTools There are several tools available for managing Python environments, including:\nvirtualenv conda pipenv These tools make it easy to create, manage, and switch between environments, and can be integrated with development tools like IDEs and text editors.\nCreate / Activate / Install In practice, creating a new environment involves using a tool like virtualenv or conda to create a new environment directory, activating the environment, and then installing the required packages and dependencies using pip or conda.\nUsing The Active Environment Once the environment is set up, you can run your code within that environment, and any packages you install will be isolated to that environment.\n",
    "description": "",
    "tags": null,
    "title": "Environments",
    "uri": "/languages/python/environments/index.html"
  },
  {
    "content": "A Python script is a file containing Python code that can be executed by the Python interpreter.\nScripts can be used to automate tasks, perform calculations, or interact with other software systems.\nRun A Script To run a Python script, you need to have the Python interpreter installed on your system. Once you have installed Python, you can run a script by opening a terminal or command prompt, navigating to the directory containing the script, and typing python myscript.py (replacing myscript with the name of your script).\nFor example, if you have a script named myscript.py in a directory called myproject, you can run it by opening a terminal or command prompt, navigating to the myproject directory, and typing python myscript.py.\nIf your script requires any command-line arguments, you can pass them to the script by including them after the script name. For example, if your script requires a filename as an argument, you could run it like this: python myscript.py myfile.txt.\nWhen you run a Python script, the interpreter reads the code in the file and executes it. Any output produced by the script is printed to the console.\n",
    "description": "",
    "tags": null,
    "title": "Executing Scripts",
    "uri": "/languages/python/executing-scripts/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Fundamentals",
    "uri": "/languages/python/fundamentals/index.html"
  },
  {
    "content": "This page provides an overview of different techniques and skill levels related to Git, including basic, intermediate, and advanced techniques.\nBasic These are the basic skills, helpful even for beginning courses and activities.\nIntermediate These would be considered intermediate skills, applied in higher-level courses and activities.\nAdvanced These are advanced skills, useful for more experienced users and advanced projects.\n",
    "description": "",
    "tags": null,
    "title": "Git",
    "uri": "/techniques/git/index.html"
  },
  {
    "content": "Git is a popular tool used to help collaborate with others and keep track of code changes over time.\nAt a high level, Git is a version control system for tracking changes in evolving code projects. Using Git allows you to easily revert to an earlier version of code if you make a mistake or if a change causes unexpected problems.\nGit makes it easy to collaborate with others on code. You can use Git to share your code with others, track changes that they make, and merge their changes back into your codebase. This makes it a great tool for open source development, where many people may be working on the same codebase at the same time.\nIn this Git introduction, we’ll start with the basics of using Git, including setting up your Git environment, creating a repository, and making commits. We’ll also cover more advanced topics like branching, merging, and collaborating with others.\nInstallation The installation process for Git depends on your operating system. Follow the instructions below based on your platform:\nGit Installation Configuration After installing, configure Git with your name and email address.\nGit Configuration Using Git When it comes to using Git, you have a few options for how to interact with it. One option is to use Git in the terminal, which involves typing out commands and working with the Git command line interface. Another option is to use a Git integration in your Integrated Development Environment (IDE), such as Visual Studio Code (VS Code).\nUsing Git in the terminal can be a bit intimidating, as it requires memorizing and typing out specific commands. However, it can be a useful skill to have, especially if you work on projects that require using Git outside of an IDE.\nOn the other hand, using a Git integration in your IDE can make the process of working with Git more user-friendly and intuitive, as you can often perform Git actions with a few clicks or keystrokes. For example, VS Code has built-in Git support and provides a visual interface for common Git actions such as committing changes, creating branches, and merging changes.\nGit Crash Course (Video) Check out the recommended Git Crash Course (Video).\nFree ProGit (Book) Check out the free ProGit book for a comprehensive guide to using Git.\nRead more branches remotes conflicts techniques ",
    "description": "",
    "tags": null,
    "title": "Git",
    "uri": "/tools/git/index.html"
  },
  {
    "content": "Git Bash is a terminal emulator that is bundled with Git for Windows. It provides a Unix-like command-line environment for Windows, including support for common Unix utilities and shell scripting. Git Bash includes a range of features and commands that are useful for developers working with Git repositories, including:\ngit: A command-line interface for interacting with Git repositories, including tasks like cloning, committing, pushing, and merging changes. ssh: A command-line interface for managing secure shell connections to remote servers and devices. curl: A command-line tool for transferring data over various protocols, including HTTP and FTP. In addition to these Git-specific features, Git Bash supports a range of general-purpose commands and utilities, including:\nls: List the contents of a directory. cd: Change the current directory. mkdir: Create a new directory. rm: Delete files. cp: Copy files. mv: Move files. ",
    "description": "",
    "tags": null,
    "title": "Git Bash",
    "uri": "/terminals/windows/git-bash/index.html"
  },
  {
    "content": "This page provides an overview of different techniques and skill levels related to GitHub, including basic, intermediate, and advanced techniques.\nBasic These are the basic skills, helpful even for beginning courses and activities.\nIntermediate These would be considered intermediate skills, applied in higher-level courses and activities.\nAdvanced These are advanced skills, useful for more experienced users and advanced projects.\n",
    "description": "",
    "tags": null,
    "title": "GitHub",
    "uri": "/techniques/github/index.html"
  },
  {
    "content": "GitHub is a popular, web-based platform that allows data analysts and developers to store and manage their code and collaborate with others.\nGitHub is built on Git, which is a distributed version control system that allows developers to track changes to their code over time and collaborate with others on the same codebase.\nWith GitHub, developers can create their own repositories, which are essentially folders that contain their code, documentation, and other files related to a specific project. They can also fork other people’s repositories to create their own copies, which they can then modify and contribute back to the original repository. This allows for easy collaboration and code sharing among developers.\nGitHub provides tools for developers to manage their code, such as the ability to track and resolve issues, review and merge pull requests, and create and manage branches. It also provides a web-based interface for viewing and editing code, as well as a built-in code editor. Additionally, it has a wide range of integrations and APIs that allow developers to automate various development tasks and integrate with other tools and services.\nSign Up For A Free Account Sign up for a free account with GitHub.com, a code hosting platform that manages a vast number of programming projects. Follow their website instructions to get started. See the recommendations on GitHub email and username below.\nGitHub Email You’ll need an email. I use a permanent personal email for most GitHub work, rather than a work or school account (which may be temporary). Your email will not be made public.\nGitHub Username You’ll create a GitHub username. Your username will be public. Your username can be anonymous (e.g., ‘analystextraordinaire’) or publicly associated with you. For example, I use ‘denisecase’. Your username will be a part of the URL to all of your projects.\nStudents New to GitHub Recruiters may look at GitHub and LinkedIn profiles - it can be helpful to show your skills using modern tools. Be courageous. The best way to learn is by doing, and don’t be too concerned about making mistakes. Git mistakes and do-overs are common getting started. Learning to fix issues is a key skill in data analytics. Keep and share your latest, most useful, and best work in GitHub. GitHub Repositories Each coding project lives in a GitHub repository (called ‘repo’ for short) in the ‘cloud’ (a distributed group of machines).\nGit (the system) keeps track of committed changes to an evolving project. - The GitHub repo can be kept in sync with a git repo on your local machine. - For example:\n- If a GitHub repo is named datafun-01-getting-started. - On my machine, it’s in my Documents/datafun-01-getting-started directory.\nQuick Quiz Go to: https://github.com/denisecase/datafun-01-getting-started\nQ: What is the username? Q: What is the repo name in the URL? Get Started After you have an account, you can use the Get Started Guide that the GitHub team has created to help you understand the platform.\nFor more information on getting started on GitHub, view the “Getting Started with GitHub” video below from the GitHub Training \u0026 Guides Youtube Channel.\nMore About GitHub The following definition of GitHub comes from Kinsta.com\nAt a high level, GitHub is a website and cloud-based service that helps developers store and manage their code, as well as track and control changes to their code. To understand exactly what GitHub is, you need to know two connected principles: Version control, which helps developers track and manage changes to a software project’s code, and Git, which is a specific open-source version control system.\nLearn more about GitHub in the following video from the GitHub YouTube.\nFree Stuff For Students For more fun stuff, check these out. Like ChatGPT? Check out the AI coding buddy, GitHub Copilot. More free resources with the GitHub Student Developer Pack https://education.github.com/pack ",
    "description": "",
    "tags": null,
    "title": "GitHub",
    "uri": "/tools/github/index.html"
  },
  {
    "content": " Powerful and Efficient Programming Language\nGolang, also known as Go, is an open-source programming language developed by Google. It is designed for simplicity, efficiency, and strong support for concurrent programming.\nWhy Golang? For developers, Golang offers several advantages over other programming languages:\nGo is designed for simplicity, making it easy to learn and write. It has strong support for concurrent programming, allowing for efficient performance in multi-core environments. Go has a garbage collector, which automatically manages memory allocation and deallocation. It has a growing ecosystem and community, with a range of libraries and frameworks available. Golang Syntax Golang has a clean and straightforward syntax, influenced by C but with some improvements. It uses static typing and supports various data types, including integers, floats, strings, and arrays. Go has built-in support for concurrent programming with goroutines and channels. Free Resources for Learning Golang The Go Programming Language: The official Go website, with documentation, tutorials, and downloads. A Tour of Go: An interactive introduction to Golang, with hands-on coding exercises. Go by Example: A collection of practical examples and snippets for learning Golang. Effective Go: A guide to writing efficient and idiomatic Golang code. The Go Playground: An online environment for writing and testing Golang code. Golang Frameworks and Libraries Golang has a growing ecosystem of libraries and frameworks, catering to various use cases such as web development, data processing, and networking. Popular Golang frameworks and libraries include Gin, Revel, and Gorilla. File Extensions .go ",
    "description": "",
    "tags": null,
    "title": "Go",
    "uri": "/languages/go/index.html"
  },
  {
    "content": "Homebrew is a package manager for macOS and Linux that simplifies the installation, updating, and management of software on your system. Homebrew allows you to install various command-line tools, applications, and libraries with ease. It is designed to work seamlessly with macOS and Linux, providing a user-friendly interface for managing software packages.\n",
    "description": "",
    "tags": null,
    "title": "Homebrew",
    "uri": "/tools/homebrew/index.html"
  },
  {
    "content": "HTML is a markup language used for creating web pages and applications.\nWhy HTML? HTML is essential for data analysts and developers who want to create web-based applications and documents.\nHTML skills allow you to create and publish web content and applications. HTML can be used with other languages like CSS and JavaScript to create dynamic web pages and applications. HTML Syntax HTML is a markup language that uses tags to define elements on a web page. Tags are used to define headings, paragraphs, links, images, and other elements. HTML documents are typically saved with the .html file extension. Free Resources for Learning HTML W3Schools HTML Tutorial: A comprehensive tutorial that covers the basics of HTML syntax and conventions. Mozilla Developer Network: HTML: Mozilla’s documentation for HTML, including tutorials and references. Codecademy: Learn HTML: A hands-on approach to learning HTML through interactive exercises and projects. HTML Dog: A site dedicated to helping people learn HTML and other web technologies. freeCodeCamp: HTML5 and CSS3 Course: A free online course that covers HTML and CSS basics for web development. File Extensions .html ",
    "description": "",
    "tags": null,
    "title": "HTML",
    "uri": "/languages/html/index.html"
  },
  {
    "content": "Docker is an open-source platform that automates the deployment, scaling, and management of applications by using containerization technology.\nUse Docker to create, manage, and deploy containerized applications.\nMac/Linux Users Option 1: Official installation instructions. Follow instructions on the official Docker website. This is the most up-to-date and comprehensive guide to installing Docker on your system.\nOption 2: Step-by-step installation guide. Check out our installation instructions for a step-by-step guide.\nWindows Users Option 1: Official installation instructions. Follow the instructions on the official Docker website. This is the most up-to-date and comprehensive guide to installing Docker Desktop on your Windows system.\nOption 2: Step-by-step installation guide. Check out our installation instructions for a step-by-step guide.\n",
    "description": "",
    "tags": null,
    "title": "Installation",
    "uri": "/tools/docker/installation/index.html"
  },
  {
    "content": "JavaScript is a popular programming language used for web development and beyond. In this page, we will cover some basics of JavaScript.\nWhy JavaScript? JavaScript is widely used for building web applications, and it’s a vital skill for web developers. Some of the reasons to learn JavaScript include:\nInteractivity: JavaScript makes websites more interactive and engaging, allowing for features such as animations, user input validation, and dynamic content updates.\nFront-end web development: JavaScript is used heavily in front-end web development, enabling developers to build user interfaces and dynamic web pages.\nBack-end web development: JavaScript can also be used for back-end web development, allowing developers to build server-side applications and APIs.\nCross-platform development: With tools like Node.js, JavaScript can be used to build cross-platform applications for desktop and mobile devices.\nFree Resources for Learning JavaScript JavaScript Tutorial for Beginners: A comprehensive tutorial covering the basics of JavaScript syntax, data types, operators, functions, and more.\nMDN Web Docs: JavaScript: Mozilla’s guide to JavaScript, including a reference guide, tutorials, and examples.\nEloquent JavaScript: A free online book that covers the basics of JavaScript programming, including control structures, functions, objects, and more.\nJavaScript30: A free 30-day JavaScript coding challenge that covers different aspects of the language and helps build real-world projects.\nCodecademy: JavaScript: An interactive online course that teaches the basics of JavaScript programming.\nFree Resources for Advanced JavaScript You Don’t Know JS: A series of books that covers advanced JavaScript topics, including closures, prototypes, asynchronous programming, and more.\nJSBooks: A collection of free JavaScript books covering advanced topics such as functional programming, design patterns, and algorithms.\nNode.js: A JavaScript runtime built on Chrome’s V8 JavaScript engine that allows developers to build scalable network applications.\nFile Extensions .js ",
    "description": "",
    "tags": null,
    "title": "JavaScript",
    "uri": "/languages/javascript/index.html"
  },
  {
    "content": " High-Performance Dynamic Programming Language\nJulia is a high-level, high-performance dynamic programming language designed for numerical and scientific computing, data analysis, and machine learning.\nWhy Julia? For developers, Julia offers several advantages over other programming languages:\nJulia has a just-in-time (JIT) compiler, which means that it can run code as fast as statically compiled languages like C and Fortran. It has a simple and expressive syntax, making it easy to learn and write. Julia supports multiple dispatch, which allows for flexible and efficient handling of functions with different argument types. It has a growing ecosystem and community, with a range of libraries and frameworks available. Julia Syntax Julia has a simple and readable syntax, with support for multiple dispatch and type inference. It supports various data types, including integers, floats, strings, and arrays. Julia has built-in support for parallel and distributed computing. Project Management Project.toml is a configuration file used in Julia projects to specify the project’s dependencies and other metadata. It is part of the Julia package management system, which provides a standardized way to manage packages and their dependencies.\nProject.toml is used by the Julia package manager to create and manage project environments. When a Project.toml file is present in a project directory, the package manager can use this file to create a dedicated environment for the project, separate from the user’s global environment or other project environments.\nIt allows developers to specify the exact version of each dependency required by the project. This helps ensure that the project is compatible with specific versions of each package, and can help avoid conflicts or unexpected behavior caused by incompatible package versions.\nProject.toml can also include other metadata about the project, such as its name, version number, and author information. This makes it easy to share and distribute the project with others.\nFree Resources for Learning Julia The Julia Language: The official Julia website, with documentation, tutorials, and downloads. Julia Academy: A collection of online courses and tutorials for learning Julia. Learn X in Y Minutes - Julia: A quick reference guide for learning Julia syntax. Julia Observer: A curated list of Julia packages and libraries. Julia Frameworks and Libraries Julia has a growing ecosystem of libraries and frameworks, catering to various use cases such as data processing, scientific computing, and machine learning. Popular Julia frameworks and libraries include Flux, DifferentialEquations.jl, and JuMP. File Extensions .jl ",
    "description": "",
    "tags": null,
    "title": "Julia",
    "uri": "/languages/julia/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Libraries",
    "uri": "/languages/python/libraries/index.html"
  },
  {
    "content": "Task 1 - Install Python Open a terminal window Run the following command to install Python: sudo apt-get install python3 (for Debian/Ubuntu-based systems) or brew install python3 (for macOS) Task 2 - Install pip Open a terminal window Run the following command to install pip: sudo apt-get install python3-pip (for Debian/Ubuntu-based systems) or sudo easy_install pip (for macOS) Task 3 - Verify Open a terminal window\nRun the following commands to verify installation:\npython3 --version pip3 -- version or\npython --version pip --version If you see version information, the installation was successful.\n",
    "description": "",
    "tags": null,
    "title": "Mac and Linux",
    "uri": "/languages/python/installation/mac-linux/index.html"
  },
  {
    "content": "The best way to install Docker for Mac and Linux is by using Docker Desktop (for Mac) and Docker Engine (for Linux). Docker provides a complete development environment for containerized applications.\nWarning: Docker is a resource-intensive application that may consume a significant amount of disk space, memory, and CPU resources. Installing and running Docker on your system may slow down your machine, especially if it has limited resources. Make sure your system meets the minimum requirements before installing Docker, and consider monitoring resource usage to ensure optimal performance.\nFollow these steps to install Docker on Mac and Linux.\nFor Mac: Ensure your system meets the requirements:\nmacOS 10.14 (Mojave) or later. Download Docker Desktop for Mac from the official Docker website.\nRun the installer:\nDouble-click the downloaded Docker Desktop Installer.dmg file and follow the on-screen instructions. Start Docker Desktop:\nAfter the installation is complete, Docker Desktop should start automatically. If it doesn’t, you can launch it from the Applications folder. You will see the Docker icon in the menu bar, indicating that Docker is running. Verify the installation:\nOpen a Terminal window. Run the following command to check the Docker version: docker --version\nRun a test container to ensure that Docker is working correctly:\ndocker run hello-world\nFor Linux: Choose the appropriate installation instructions for your Linux distribution from the official Docker Engine documentation.\nFollow the provided instructions to install Docker Engine on your system.\nVerify the installation:\nOpen a Terminal window. Run the following command to check the Docker version: docker --version\nRun a test container to ensure that Docker is working correctly:\ndocker run hello-world\nSave Resources To stop Docker when you are not using it:\nFor Mac Locate the Docker icon in the menu bar, which is typically located in the upper-right corner of the screen. Click on the Docker icon to open the dropdown menu. Click on “Quit Docker Desktop” or “Exit” to stop Docker Desktop. For Linux Open a Terminal window. Run the following command to stop the Docker daemon: sudo systemctl stop docker\nTo start Docker again, simply launch the application from the Applications folder (Mac) or run the following command in a Terminal window (Linux):\nsudo systemctl start docker\n",
    "description": "",
    "tags": null,
    "title": "Mac and Linux",
    "uri": "/tools/docker/installation/mac-linux/index.html"
  },
  {
    "content": "Task 1 - Download and install Git Open a terminal window Run the following command to install Git: sudo apt-get install git (for Debian/Ubuntu-based systems) or brew install git (for macOS) Task 2 - Configure Git Open a terminal window Run the following commands to configure Git with your name (your real name, e.g. “Denise Case”) and the email address you used for GitHub. git config --global user.name \"Your Name\" git config --global user.email \"your.email@example.com\" Important: Replace “Your Name” with your name and “your.email@example.com” with the email address associated with your GitHub account This configuration will be used for all of your Git repositories Task 3 - Verify Run the following command to verify your Git configuration: git config --list You should see your name and email address listed under the “user” section If the information is not correct, you can run the git config command again to update it ",
    "description": "",
    "tags": null,
    "title": "Mac and Linux",
    "uri": "/tools/git/installation/mac-linux/index.html"
  },
  {
    "content": "Markdown is a lightweight markup language for formatting text on the web.\nWhy Markdown? Markdown is an essential tool for data analysts and developers. With its simple syntax and powerful features, Markdown is easy to learn, widely used, and perfect for creating structured documents and web content.\nFor data analysts and developers:\nMarkdown is an invaluable skill for creating clear and concise documentation of our work. Markdown skills help communicate our findings more effectively to colleagues and stakeholders, and make our work more accessible and engaging to others. Markdown for READMEs Markdown can be used to create professional README.md files to introduce our project repositories on GitHub. README.md files help others understand the purpose of our project, its features, and how to use it. Markdown for Notebooks Markdown is widely used in Jupyter Notebooks, a popular tool for data analysis and scientific computing. With Markdown, we can create rich and informative narratives alongside our code and visualizations. Markdown Syntax Free Resources for Learning Markdown Markdown Guide: A comprehensive guide to Markdown syntax, examples, and tools.\nMastering Markdown: GitHub’s guide to Markdown syntax, including examples and tips for working with GitHub-flavored Markdown.\nMarkdown Tutorial by CommonMark: A tutorial that covers the basics of Markdown syntax and conventions.\nDaring Fireball: Markdown: The original Markdown syntax guide, written by John Gruber.\nTypora: A free, cross-platform Markdown editor with a live preview feature.\nMarkdown Cheatsheet: A handy reference sheet for common Markdown syntax and formatting.\nFree Resources for Learning GitHub-Flavored Markdown GitHub Docs: Writing on GitHub: GitHub’s official documentation on writing and formatting content on GitHub.\nGitHub Markdown Tutorial: A tutorial video that covers the basics of GitHub-flavored Markdown syntax.\nGitHub Flavored Markdown Spec: The official specification for GitHub-flavored Markdown syntax, including code blocks, tables, and more.\nGitHub Markdown Preview: A Chrome extension that provides a live preview of GitHub-flavored Markdown syntax in the browser.\nFile Extensions .md .markdown ",
    "description": "",
    "tags": null,
    "title": "Markdown",
    "uri": "/languages/markdown/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Miniconda",
    "uri": "/tools/miniconda/index.html"
  },
  {
    "content": "Pandas is a popular open-source library for data analytics in Python. It provides powerful tools for working with tabular data, such as data frames and series. With pandas, you can easily read, manipulate, and analyze data in a variety of formats, including CSV, Excel, SQL databases, and more.\nOne of the key features of pandas is its ability to handle missing data. Pandas provides a number of methods for filling in missing data, interpolating values, and dropping missing data altogether. This is a critical feature for data analytics, as real-world data is often incomplete or inconsistent.\nPandas performs complex data transformations and aggregations. With pandas, you can group data by one or more columns, apply functions to subsets of data, and pivot data to reshape it in different ways.\nPandas provides tools for merging and joining data from multiple sources, making it easy to combine data from different sources into a single data set.\nBeing good at pandas is a valuable skill.\nFaster Options Pandas can be a bit slow. Options include:\nMoving to the faster Pandas 2.0 Trying Polars Pandas 2.0 Pandas 2.0 is a significant update the to the beloved pandas.\nLearn more at:\nPandas 2.0 (official) Pandas 2.0 and its Ecosystem (Arrow, Polars, DuckDB) Polars Polars is a data manipulation library written with Rust that aims to provide a fast, memory-efficient alternative to Pandas for large-scale data processing. It’s still a relatively new library, having been first released in 2019, a nd its user base and ecosystem are still growing.\nPolars has a lot of potential as a fast and memory-efficient data manipulation library for large datasets, but it’s still a relatively new library and may not have the same level of maturity and ecosystem as Pandas.\n",
    "description": "",
    "tags": null,
    "title": "pandas",
    "uri": "/languages/python/pandas/index.html"
  },
  {
    "content": "Pip is a package manager for Python, used to install and manage software packages written in Python. It allows developers to easily install, upgrade, and uninstall Python packages and their dependencies, making it a powerful tool for managing project dependencies and keeping development environments consistent. pip can be used to install packages from the official Python Package Index (PyPI) as well as from other package repositories, and can also be used to install packages directly from source code. pip is included with Python by default from Python version 3.4 onwards, and can be installed for older versions of Python as well.\n",
    "description": "",
    "tags": null,
    "title": "pip",
    "uri": "/tools/pip/index.html"
  },
  {
    "content": " Cross-Platform Automation and Configuration\nPowerShell Core is an open-source automation and configuration programming language for Windows, Linux, and macOS. It provides a powerful command-line interface for managing and automating systems and processes.\nWhy PowerShell Core? For developers and system administrators, PowerShell Core offers several advantages over other automation and scripting tools:\nPowerShell Core is cross-platform. It’s a powerful and flexible scripting language. It has a large and active community of users and contributors, with many resources and tutorials available. PowerShell Core Syntax PowerShell Core uses a command-line interface and scripting language that is similar to Unix shell scripting. It supports various data types, including strings, numbers, arrays, and objects. PowerShell Core has built-in support for remote management and automation. Free Resources for Learning PowerShell Core PowerShell Documentation: The official documentation for PowerShell, with guides, tutorials, and reference material. PowerShell Tutorial: A comprehensive tutorial for learning PowerShell, covering the basics of automation and scripting. PowerShell in a Month of Lunches: A book by Don Jones and Jeffery Hicks, covering the fundamentals of PowerShell scripting and automation. PowerShell Core Modules and Libraries PowerShell Core has a large and growing collection of modules and libraries, catering to various automation and system management use cases. Popular PowerShell modules include Pester, PSReadLine, and PowerShell Gallery.\nFile Extensions .ps1 Read More in the Terminals Chapter Terminals / PowerShell ",
    "description": "",
    "tags": null,
    "title": "PowerShell",
    "uri": "/languages/powershell/index.html"
  },
  {
    "content": "PowerShell is a command-line shell and scripting language designed for system administration and automation in Windows. PowerShell provides a more powerful and flexible command-line environment than the Command Prompt, with support for features like object-oriented pipelines, remote management, and scripting with .NET objects.\nPowerShell includes a wide range of built-in commands, called cmdlets, that provide access to various Windows management features, such as:\nGet-Process: Display information about running processes, including process ID (PID), CPU and memory usage, and parent process ID. Get-Service: Display information about system services, including status, startup type, and dependencies. Get-ChildItem: List the contents of a directory and display file information, including timestamps and permissions. Set-Content: Write text to a file. Invoke-WebRequest: Retrieve content from a web page or API. In addition to these built-in cmdlets, PowerShell supports a range of scripting and automation features, including:\nVariables and data types: PowerShell supports a range of data types, including strings, numbers, and arrays, as well as variables for storing and manipulating data. Control flow statements: PowerShell supports a range of control flow statements, including loops, conditionals, and switch statements. Functions: PowerShell supports the creation of reusable functions, allowing for modular and organized scripts. Remote management: PowerShell can be used to manage remote Windows machines, allowing for automation and management of distributed systems. PowerShell is a powerful and flexible tool for system administration and automation in Windows, providing access to a wide range of management features and automation capabilities.\n",
    "description": "",
    "tags": null,
    "title": "PowerShell",
    "uri": "/terminals/windows/powershell/index.html"
  },
  {
    "content": "There are several ways to manage dependencies and project metadata in Python. While they differ in their syntax and capabilities, they can all be used to specify the dependencies required for a Python project.\npyproject.toml pyproject.toml is a configuration file used in modern Python projects to specify various aspects of the project, including its dependencies, build settings, and package metadata. It is part of the Python Packaging ecosystem, which provides a standardized way to manage Python packages and their distribution.\npyproject.toml is similar to Project.toml, used in Julia projects.\npyproject.toml is used by the Poetry package manager, a popular tool for managing dependencies and building Python projects. Poetry relies on the pyproject.toml file to define the project’s dependencies, and uses this information to create a virtual environment for the project and install the necessary dependencies.\nIt provides a simple, declarative way to manage project dependencies, without the need for separate requirements.txt or setup.py files. It also allows developers to specify other project metadata, such as its version number, author, and license.\nWith pep-0621 pyproject.toml is the standard for managing Python projects, and increasingly used by many popular Python packages and tools.\nBy adopting pyproject.toml and the Python Packaging ecosystem, developers ensure that their projects are well-organized, maintainable, and easily sharable with others in the Python community.\nPoetry Poetry is a modern Python packaging and dependency management tool that helps simplify the process of managing dependencies and building projects. It allows developers to define their project dependencies in a declarative way using a simple pyproject.toml file, rather than relying on separate requirements.txt or setup.py files.\nOne of the key advantages of using Poetry is that it provides a streamlined workflow for managing dependencies and virtual environments. It can automatically create and manage virtual environments for each project, isolating project dependencies and avoiding conflicts with system-level packages. Poetry also provides powerful tools for managing dependencies, including automatic dependency resolution, dependency locking, and the ability to publish and install packages from both PyPI and private repositories.\nAnother advantage of using Poetry is that it provides a simple, consistent interface for managing all aspects of a Python project, from dependency management to building and publishing packages. This makes it easier for developers to focus on writing code and building their projects, without getting bogged down in the details of project management.\nLegacy Project Management Although pyproject.toml is the new standard for managing dependencies and metadata in modern Python projects, you may still encounter older projects that use requirements.txt and setup.py.\nrequirements.txt is a file used to specify a project’s dependencies in a simple, text-based format. Each line in the file lists a package name and version number, separated by an equals sign. This format is easy to read and edit, and is supported by many Python tools and frameworks. However, it lacks some of the advanced features provided by pyproject.toml, such as the ability to specify package metadata and build settings.\nsetup.py is a script used to build and distribute Python packages. It includes metadata about the package, such as its name, version, and author information, as well as instructions for building and installing the package. Although setup.py is still used in many projects, it has some limitations, such as the inability to specify dependencies with the same level of detail as pyproject.toml.\nRecommendations If you’re starting a new Python project from scratch, it’s generally not recommended to use requirements.txt or setup.py as the primary method for managing dependencies and metadata. Instead, you should use pyproject.toml, which is the modern standard for these tasks.\nHowever, if you’re working with an existing project that uses requirements.txt or setup.py, it’s often necessary to keep these files around for compatibility reasons. For example, if you’re working on a project that is already deployed to production and relies on requirements.txt to specify its dependencies, you may not want to switch to pyproject.toml right away, since this could cause compatibility issues or require a significant amount of testing.\n",
    "description": "",
    "tags": null,
    "title": "Project Management",
    "uri": "/languages/python/project-management/index.html"
  },
  {
    "content": "Python is a high-level programming language used for a wide range of applications, from data analysis to web development.\nWhy Python? Python is an essential tool for data analysts and developers. With its easy-to-learn syntax, vast library of modules, and robust community support, Python is perfect for:\nData analysis, including statistical analysis, data visualization, and machine learning. Web development, including server-side programming, web scraping, and automation. Scripting, including system administration, text processing, and task automation. Scientific computing, including simulations, modeling, and optimization. Learning Python can be a valuable investment in your career.\nInstallation The installation process for Git depends on your operating system. Follow the instructions below based on your platform:\nGit Installation Free Resources Python.org - The official website of the Python programming language. Includes documentation, tutorials, and downloads for the latest versions of Python. Python for Data Analysis - A comprehensive guide to using Python for data analysis, written by Wes McKinney, the creator of Pandas. Python Data Science Handbook - A free online book that covers the fundamentals of data science using Python. Real Python - A collection of tutorials, courses, and articles on Python programming, web development, and data science. Python Crash Course - A beginner-friendly guide to Python programming, with examples and exercises covering key topics such as variables, functions, and control flow. File Extensions .py - Python source code files .ipynb - Jupyter Notebook files .pyc - Compiled Python files .pyd - Python extension modules .pyo - Optimized Python files .whl - Python package distribution files ",
    "description": "",
    "tags": null,
    "title": "Python",
    "uri": "/languages/python/index.html"
  },
  {
    "content": "This page provides an overview of different techniques and skill levels related to Python, including basic, intermediate, and advanced techniques.\nBasic These are the basic skills, helpful even for beginning courses and activities.\nIntermediate These would be considered intermediate skills, applied in higher-level courses and activities.\nAdvanced These are advanced skills, useful for more experienced users and advanced projects.\n",
    "description": "",
    "tags": null,
    "title": "Python",
    "uri": "/techniques/python/index.html"
  },
  {
    "content": " Data Analysis and Statistics\nR is a programming language designed for data analysis and statistical computing. It is widely used by data scientists, statisticians, and researchers for various purposes.\nWhy R? For developers, R offers several advantages over other programming languages:\nR has a focus on data analysis and statistical computing, with a range of built-in functions and libraries for these tasks. It provides a high-level interface for data manipulation and visualization, making it easy to explore and analyze complex data sets. R has a large and active community of users and contributors, with many resources and tutorials available. R Syntax R has a simple and intuitive syntax, with a focus on data manipulation and analysis. It supports various data types, including vectors, matrices, data frames, and lists. R has built-in support for statistical functions and libraries. Free Resources for Learning R R Project: The official R website, with downloads, documentation, and resources. R Tutorial: A comprehensive tutorial for learning R, covering the basics of data analysis and visualization. R for Data Science: A book by Hadley Wickham and Garrett Grolemund, covering the fundamentals of data science with R. Coursera: Various online courses on R programming and data science. R Frameworks and Libraries R has a large and diverse ecosystem of libraries and packages, catering to various data science use cases such as data manipulation, visualization, machine learning, and more. Popular R libraries include ggplot2, dplyr, tidyr File Extensions .R ",
    "description": "",
    "tags": null,
    "title": "R",
    "uri": "/languages/r/index.html"
  },
  {
    "content": "In Git, the term “origin” refers to the default remote repository that a local repository is linked to. When you clone a repository from a remote server to your local machine, Git automatically sets up the “origin” remote for you. This allows you to push changes from your local repository to the remote repository, and pull changes from the remote repository to your local repository.\nWhen you clone a repository, Git sets up the origin remote by default, pointing to the repository you cloned from. This means that when you push changes to the remote repository, they will be added to the branch on the remote repository that you cloned from.\nUsing the “origin” remote allows you to collaborate with others by sharing changes to the same repository. When someone else pushes changes to the remote repository, you can pull those changes down to your local repository and merge them with your own changes.\nHowever, if you edit the same file in both your local repository and the remote repository, conflicts can arise. To avoid conflicts, it’s important to always pull down changes from the remote repository before making your own changes, and to carefully review any merge conflicts that arise.\nWorking with Remote Repositories Git provides a set of commands that allow you to work with remote repositories. Here are some commonly used commands:\ngit remote - List the remote repositories that are connected to your local repository.\ngit remote -v - List the remote repositories along with their URLs.\ngit remote add \u003cname\u003e \u003curl\u003e - Add a new remote repository to your local repository. The name parameter is the name you want to give the remote, and url is the URL of the remote repository.\ngit remote rm \u003cname\u003e - Remove a remote repository from your local repository.\ngit push \u003cremote\u003e \u003cbranch\u003e - Push your local changes to a remote repository. The remote parameter is the name of the remote repository, and branch is the branch you want to push to.\ngit pull \u003cremote\u003e \u003cbranch\u003e - Pull changes from a remote repository into your local repository. The remote parameter is the name of the remote repository, and branch is the branch you want to pull from.\ngit fetch \u003cremote\u003e - Fetch the changes from a remote repository, but don’t apply them to your local repository.\ngit clone \u003curl\u003e - Clone a remote repository to your local machine.\nGit Learning: Concepts Over Memorization Learning every Git command by heart is not necessary nor efficient. Instead, focus on understanding the concepts and workflows of Git, and how the commands fit into those workflows. The vast amount of online resources available will serve as reliable references when you need them.\nAs you work with Git more frequently, the most common commands will become second nature. However, for the rest, don’t hesitate to look them up. Remember that the value of Git lies not in memorizing commands but in leveraging its powerful version control capabilities to manage your projects effectively.\n",
    "description": "",
    "tags": null,
    "title": "Remotes",
    "uri": "/tools/git/remotes/index.html"
  },
  {
    "content": " Powerful and Safe Programming Language\nRust is an open-source programming language developed by Mozilla. It aims to provide a fast and safe alternative to C and C++, with a focus on memory safety and concurrency.\nWhy Rust? For developers, Rust offers several advantages over other programming languages:\nRust has a focus on safety, with memory and thread-safety enforced at compile-time. It provides low-level control like C and C++ but without the risk of memory errors and vulnerabilities. Rust’s borrow checker prevents data races and other concurrency issues. It has a growing ecosystem and community, with a range of libraries and frameworks available. Rust Syntax Rust has a clean and modern syntax, influenced by C and other systems programming languages. It uses static typing and supports various data types, including integers, floats, strings, and arrays. Rust has built-in support for concurrent programming with threads and channels. Free Resources for Learning Rust The Rust Programming Language: The official Rust website, with documentation, tutorials, and downloads. Rust By Example: An interactive introduction to Rust, with hands-on coding exercises. Rustlings: A collection of small exercises to get started with Rust. Rust Cookbook: A collection of practical examples and snippets for learning Rust. Rust Playground: An online environment for writing and testing Rust code. Rust Frameworks and Libraries Rust has a growing ecosystem of libraries and frameworks, catering to various use cases such as web development, game development, and systems programming. Popular Rust frameworks and libraries include Actix, Rocket, and Serde. File Extensions .rs ",
    "description": "",
    "tags": null,
    "title": "Rust",
    "uri": "/languages/rust/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/index.html"
  },
  {
    "content": " Code Might Fail\nIt’s important to use try/except/finally whenever your application could fail through no fault of your own.\nQuestions Shouldn’t we fix all errors first? Why do we need try/except/finally? Answer We should always strive to fix all coding and logic errors. However, sometimes our code can be perfect - but exceptions can still happen. try/except/finally is a way to gracefully handle unexpected errors and prevent our program from crashing.\nExample Suppose you write a script to read baseball_game_results.csv each night at midnight.\nIt runs fine until someone changes the filename to rslts.csv.\nNow, your code terminates with an ugly error because the necessary file can’t be found.\nTo code professionally, we can use try/except to handle this error gracefully.\ntry: # Attempt to open the file with open('baseball_game_results.csv', 'r') as f: # Do something with the file except FileNotFoundError: # Handle the case where the file is not found print('ERROR: File not found. Please name the file to baseball_game_results.csv') finally: # Clean up any resources (e.g. file handles) used by the code Other Programming Languages Other programming languages use something very similar, but might use the keywords try/catch/finally. As in “try this, and if you catch an exception, do this.”\nThrowing Exceptions Exceptions are thrown by nested functions, up, up, up, until some level “catches” the exception and deals with it, or the program terminates with an ugly error. It’s important to handle exceptions gracefully and prevent our programs from crashing.\n",
    "description": "",
    "tags": null,
    "title": "Try Except",
    "uri": "/languages/python/try/index.html"
  },
  {
    "content": "Python seems to install a bit like a virus and traces can get everywhere.\nAt times, removing an old version of Python can be challenging.\nCleaning up unneeded Python installations can help avoid conflicts between different Python versions and packages.\nUsing package managers and virtual environments can help.\nUninstalling Installations can leave traces on your system that may no longer be needed. Here are some recommendations for cleaning up old Python installations:\nUninstall Python from the Control Panel: If you have installed Python using the official installer on a Windows machine, you can uninstall it from the Control Panel. Simply search for “Add or Remove Programs” in the Start menu, then find the Python installation you want to remove and click “Uninstall”.\nDelete Python folders: Python installations typically create folders on your system that can be deleted to remove the installation. The main folders are typically located in C:\\Python or C:\\Users\\{user}\\AppData\\Local\\Programs\\Python. Be careful when deleting folders to ensure you are only deleting the correct installation.\nClean up environment variables: Python installations can add environment variables to your system that may no longer be needed. You can clean these up by going to the System Properties window, selecting “Advanced System Settings”, then clicking the “Environment Variables” button. Here you can remove any Python-related environment variables that are no longer needed.\nManagement Tools Managing Python well can help avoid issues. The following recommendations can help.\nUse a package manager: Using a package manager like conda or pipenv can help keep track of Python installations and dependencies. These package managers allow you to create isolated environments for specific projects, so you can avoid installing unnecessary packages and versions of Python.\nUse virtual environments: Another way to manage multiple Python installations is to use virtual environments. Virtual environments allow you to create isolated environments for specific projects, so you can avoid conflicts between different Python versions and packages. You can create virtual environments using the venv module or third-party tools like virtualenv or conda.\n",
    "description": "",
    "tags": null,
    "title": "Uninstalling",
    "uri": "/languages/python/uninstalling/index.html"
  },
  {
    "content": "Visual Studio Code (VS Code) is a free and open-source code editor developed by Microsoft. It is available on Windows, Linux, and macOS and offers features such as debugging, syntax highlighting, and intelligent code completion.\nSome of the key features of VS Code include:\nBuilt-in Git integration Support for multiple languages and frameworks Extensions for customizing the editor and adding new functionality Debugging capabilities for Node.js, Python, and other languages Integrated terminal for running commands and scripts Using a modern editor or IDE can make your coding experience more efficient and productive.\nInstallation The installation process depends on your operating system. Follow the instructions below based on your platform:\nInstallation VS Code Extensions VS Code extensions are add-ons that allow users to customize and enhance the functionality of the VS Code.\nFor example, IntelliSense is a popular VS Code extension that provides intelligent code suggestions, auto-completion, and parameter hints while writing code. It is a built-in extension enabled by default in VS Code.\nTo learn more about extensions, visit the official documentation at https://code.visualstudio.com/docs/introvideos/extend.\nWhy VS Code One reason we teach VS Code over other IDEs (.e.g., Spyder, PyCharm, IDLE) is that VS Code is a more general-purpose code editor that supports multiple languages and workflows, and works on Windows, Mac, and Linux machines. VS Code is capable of handling a wide range of tasks and can be used for web development, data analysis, scripting, and more.\nVS Code has a lot of built-in functionality for working with other languages including Markdown, SQL, PowerShell, Julia, and more. Learning VS Code is a great skill for someone getting started with programming, data analysis, and/or automation and wants to learn a versatile environment that will accomodate growing skills.\nVS Code is widely used and well-supported, with many resources for learning how to use it effectively. In addition to the comprehensive official documenttaion, there are articles and videos available for begineers through experts.\n",
    "description": "",
    "tags": null,
    "title": "VS Code",
    "uri": "/tools/vs-code/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "VS Code Terminal",
    "uri": "/terminals/vs-code-terminal/index.html"
  },
  {
    "content": "Task 1 - Install Python (includes pip) Go to the Python download page at https://www.python.org/downloads/windows/ Click the “Download Python” button for the latest version of Python Read and follow the official instructions here (things change; adapting is key!): https://docs.python.org/3/using/windows.html Run the installer file that you downloaded as an Administrator, checking both options: The first checkbox is checked - keep it checked. Also check “Add Python to PATH” during the installation process Click “Install Now” to install Python (which will include pip) Task 2 - Activate the New Environment Close and reopen the command prompt or PowerShell window to activate the new environment.\nTask 3 - Verify Installation Open a command prompt or PowerShell window Run the following commands to verify installation: python3 --version pip3 --version or\npython --version pip --version If you see version information, the installation was successful.\n",
    "description": "",
    "tags": null,
    "title": "Windows",
    "uri": "/languages/python/installation/windows/index.html"
  },
  {
    "content": "Windows offers multiple terminal options for developers and users, and many are widely used. Skills in any or all of these can be very valuable.\nCommand Prompt The Command Prompt is a basic terminal emulator that has been included in Windows since the early days. It supports running basic commands, navigating the file system, and running batch scripts. However, it lacks some of the advanced features found in modern terminal emulators.\nGit Bash Git Bash is a terminal emulator that is bundled with Git for Windows. It provides a Unix-like command-line environment for Windows, including support for common Unix utilities and shell scripting. It also includes Git-specific features, such as auto-completion for Git commands and syntax highlighting for diffs.\nPowerShell PowerShell is a command-line shell and scripting language designed for system administration and automation. It provides a more powerful and flexible command-line environment than the Command Prompt, with support for features like object-oriented pipelines, remote management, and scripting with .NET objects.\nPowerShell includes Intellisense to help complete commands. To accept a suggestion, use the right arrow key (instead of tab).\nWindows Subsystem for Linux Windows Subsystem for Linux (WSL) is a feature of Windows 10 that allows users to run a Linux environment directly on Windows, without the need for a virtual machine or container. It provides access to a full-fledged Linux system, including a terminal emulator and support for running Linux applications and scripts. WSL can be used for development, testing, and running Linux-based tools and utilities on Windows.\nKnowledge of Linux commands can be especially helpful in security and digital forensic investigations.\n",
    "description": "",
    "tags": null,
    "title": "Windows",
    "uri": "/terminals/windows/index.html"
  },
  {
    "content": "The best way to install Docker for Windows is by using Docker Desktop. Docker Desktop is an easy-to-use application that allows you to run containers on your Windows machine. It includes both Docker Engine and Docker Compose, providing a complete development environment for containerized applications.\nWarning: Docker is a resource-intensive application that may consume a significant amount of disk space, memory, and CPU resources. Installing and running Docker on your system may slow down your machine, especially if it has limited resources. Make sure your system meets the minimum requirements before installing Docker, and consider monitoring resource usage to ensure optimal performance.\nFollow these steps to install Docker Desktop for Windows.\nEnsure your system meets the requirements: Windows 10 64-bit: Pro, Enterprise, or Education (Build 16299 or later) or Windows 11.\nVirtualization must be enabled in the BIOS. You can usually find this setting under “CPU Configuration,” “Virtualization,” or “VT-x” settings.\nDownload Docker Desktop for Windows from the official Docker website. (600+ MB).\nRun the installer:\nDouble-click on the downloaded Docker Desktop Installer.exe file to start the installation process. Follow the on-screen instructions, accepting the default settings or customizing them as needed. Start Docker Desktop: After the installation is complete, Docker Desktop should start automatically. - If it doesn’t, you can launch it from the Start menu. You will see the Docker icon in the system tray, indicating that Docker is running. Right-click on the icon and select “Dashboard” to open the Docker Desktop dashboard. Verify the installation: Open a command prompt or PowerShell window. Run the following command to check the Docker version: docker --version\nRun a test container to ensure that Docker is working correctly: docker run hello-world\nSave Resources To stop Docker Desktop when you are not using it:\nLocate the Docker icon in the system tray, which is typically located in the lower-right corner of the screen.\nRight-click on the Docker icon to open the context menu.\nClick on “Quit Docker Desktop” or “Exit” to stop Docker Desktop.\n",
    "description": "",
    "tags": null,
    "title": "Windows",
    "uri": "/tools/docker/installation/windows/index.html"
  },
  {
    "content": "Task 1 - Download and install Git Go to the Git download page at https://git-scm.com/download/win Click the “Download” button to download the Git installer Run the installer file that you downloaded Accept the default installation options and click “Install” Choose the appropriate options for line ending conversion and terminal emulator during the installation process Task 2 - Configure Git Open a command prompt or PowerShell window Run the following commands to configure Git with your name (your real name, e.g. “Denise Case”) and the email address you used for GitHub: git config --global user.name \"Your Name\" git config --global user.email \"your.email@example.com\" Important: Replace “Your Name” with your name and “your.email@example.com” with the email address associated with your GitHub account This configuration will be used for all of your Git repositories Task 3 - Verify Run the following command to verify your Git configuration: git config --list You should see your name and email address listed under the “user” section If the information is not correct, run the git config command again to update it ",
    "description": "",
    "tags": null,
    "title": "Windows",
    "uri": "/tools/git/installation/windows/index.html"
  },
  {
    "content": "Windows Subsystem for Linux (WSL) is a feature of Windows 10 that allows users to run a Linux environment directly on Windows, without the need for a virtual machine or container. WSL provides access to a full-fledged Linux system, including a terminal emulator and support for running Linux applications and scripts.\nWSL supports two different versions:\nWSL 1: Uses a translation layer to provide compatibility between Linux system calls and Windows kernel system calls. WSL 1 provides access to a full Linux environment, but can be slower than running Linux natively.\nWSL 2: Uses a lightweight virtual machine to provide a complete Linux kernel running directly on Windows. WSL 2 provides improved performance and compatibility with Linux applications, but requires more system resources.\nWSL includes a range of Linux commands and utilities, allowing users to perform tasks like navigating the file system, managing packages, and running scripts. Users can also install and use Linux applications and development tools directly within WSL, including:\nPython, Ruby, and other programming languages. Git, Subversion, and other version control systems. Apache, NGINX, and other web servers. Docker, Kubernetes, and other containerization tools. ",
    "description": "",
    "tags": null,
    "title": "Windows Subsystem for Linux (WSL)",
    "uri": "/terminals/windows/wsl/index.html"
  },
  {
    "content": "Winget (Windows Package Manager) is an official package manager for Windows systems, developed by Microsoft. It simplifies the process of discovering, installing, upgrading, and removing software on Windows machines. Winget provides command-line access to manage software packages, s imilar to package managers on Linux and macOS systems.\nWith Winget, you can search for, install, update, and uninstall software packages without having to manually navigate to a website, download installers, or follow installation wizards. Winget automates these tasks and makes it easy to manage software on your Windows system.\nAlternatives For a while yet, Chocolatey is a popular alternative. Chocolatey has been around for a longer time, offering a mature set of features and a large repository of packages. The Chocolatey community is well-established, and it has extensive documentation and support. Chocolatey is known for its versatility and integration with various Windows tools, such as PowerShell and NuGet infrastructure. This makes it a popular choice for many Windows users looking for a reliable and comprehensive package management solution.\n",
    "description": "",
    "tags": null,
    "title": "Winget",
    "uri": "/tools/winget/index.html"
  }
]
